(function () {
	'use strict';

	angular.module( 'mpdDashboard', [
		// Dependencies
		'gettext',
		'ui.router',
		'angular-growl',
		'cas-auth-api',
		'mpdDashboard.settingsService',

		// States
		'mpdDashboard.states.dashboard.countries'
	] );
})();

(function ( module ) {
	'use strict';

	module.config( ["$stateProvider", "$urlRouterProvider", function ( $stateProvider, $urlRouterProvider ) {
		$urlRouterProvider.otherwise( '/countries' );

		$stateProvider.state( 'app', {
			abstract:    true,
			url:         '/',
			resolve:     {
				'user': ["$log", "$q", "$state", "User", function ( $log, $q, $state, User ) {
					return User.get().$promise;
				}]
			},
			templateUrl: 'app/states/app.html'
		} );
	}] );

})( angular
	.module( 'mpdDashboard.states.app', [
		// Dependencies
		'ui.router',
		'angular-growl',
		'ui.bootstrap.collapse',
		'ui.bootstrap.dropdown',

		// APIs
		'mpdDashboard.api.user',

		// States
		'mpdDashboard.states.unauthorized'
	] ) );

(function ( module ) {
	'use strict';

	module.config( ["$stateProvider", function ( $stateProvider ) {

		$stateProvider.state( 'dashboard', {
			abstract: true,
			parent:   'app',
			url:      '?estimated',
			resolve:  {
				'permissions': ["$q", "$state", "user", function ( $q, $state, user ) {
					var deferred     = $q.defer(),
						hasCountries = user.attributes.permissions.countries.length !== 0,
						hasAccounts  = user.attributes.permissions.accounts.length !== 0;

					if ( hasCountries || hasAccounts ) {
						deferred.resolve( user.attributes.permissions );
					}
					else {
						$state.go( 'unauthorized' );
						deferred.reject( 'unauthorized' );
					}
					return deferred.promise;
				}],
				'estimated':   ["$stateParams", function ( $stateParams ) {
					return {estimated: $stateParams.estimated === 'false' ? false : true};
				}]
			},
			views:    {
				'footer@app':     {
					template:   '<div ng-if="estimated.estimated" class="alert alert-estimated">*Based on estimated budget(s)</div>',
					controller: ["$scope", "estimated", function ( $scope, estimated ) {
						$scope.estimated = estimated;
					}]
				},
				'navbarForm@app': {
					templateUrl: 'app/states/dashboard/estimated-toggle.html',
					controller:  'EstimatedToggleController as toggle'
				},
				'navigation@app': {
					templateUrl: 'app/states/dashboard/navigation.html',
					controller:  'NavigationController as nav'
				}
			},
			params:   {
				estimated: {
					value:  'true',
					squash: true
				}
			}
		} );
	}] );

})( angular
	.module( 'mpdDashboard.states.dashboard', [
		// Dependencies
		'ui.router',
		'angular-growl',
		'ui.bootstrap.buttons',

		// APIs
		'mpdDashboard.api.user',

		// Dependent States
		'mpdDashboard.states.app'
	] ) );

(function ( module ) {
	'use strict';

	module.config( ["$stateProvider", function ( $stateProvider ) {

		$stateProvider.state( 'unauthorized', {
			parent:  'app',
			url:     '',
			resolve: {
				'permissions': ["$q", "$state", "User", function ( $q, $state, User ) {
					var deferred = $q.defer();
					User.get().$promise.then( function ( user ) {
						var countries = _.sortBy( user.attributes.permissions.countries, 'name' ),
							accounts  = _.sortBy( user.attributes.permissions.accounts, 'name' );
						if ( countries.length === 0 && accounts.length === 0 ) {
							deferred.resolve( true );
						}
						else if ( countries.length !== 0 ) {
							if ( countries.length === 1 ) {
								var country = _.first( countries );
								$state.go( 'country', {id: country.id} );
							}
							else {
								$state.go( 'countries' );
							}
						}
						else {
							var account = _.first( accounts );
							$state.go( 'staffAccount', {id: account.id} );
						}
					}, function () {
						deferred.resolve( true );
					} );
					return deferred.promise;
				}]
			},
			views:   {
				'@app': {
					templateUrl: 'app/states/unauthorized/unauthorized.html',
					controller:  ["$scope", "permissions", "$stateParams", function ( $scope, permissions, $stateParams ) {
						console.log( $stateParams );
						// require permissions so it gets resolved
						$scope.message = angular.isDefined( $stateParams.message ) ? $stateParams.message : undefined;
					}]
				}
			},
			params: {
				message: null
			}
		} );
	}] );

})( angular
	.module( 'mpdDashboard.states.unauthorized', [
		// Dependencies
		'ui.router',
		'angular-growl',

		// Dependent States
		'mpdDashboard.states.app',
		'mpdDashboard.states.dashboard.countries',
		'mpdDashboard.states.dashboard.staffAccount',
		'mpdDashboard.states.dashboard.country'
	] ) );

(function ( module ) {
	'use strict';

	module.config( ["$stateProvider", function ( $stateProvider ) {

		$stateProvider.state( 'countries', {
			parent:  'dashboard',
			url:     'countries',
			resolve: {
				'hasCountries': ["$state", "permissions", function ( $state, permissions ) {
					if ( permissions.countries.length === 0 ) {
						$state.go( 'unauthorized' );
					}
					return permissions.countries;
				}],
				'countries':    ["$log", "$q", "$state", "Countries", "estimated", "hasCountries", function ( $log, $q, $state, Countries, estimated, hasCountries ) {
					var deferred = $q.defer();
					Countries
						.query( estimated.estimated ? {estimated: true} : {} )
						.$promise
						.then( function ( countries ) {
							deferred.resolve( countries );
						}, function () {
							$state.go( 'unauthorized' );
						} );
					return deferred.promise;
				}],
				'geodata':      ["$log", "$filter", "countries", function ( $log, $filter, countries ) {
					var data       = _.reject( _.pluck( countries, 'attributes' ), function ( obj ) {
							return angular.isUndefined( obj.iso_code ) || _.isNull( obj.iso_code ) || obj.iso_code === '';
						} ),
						iso_codes  = ['Country'].concat( _.pluck( data, 'iso_code' ) ),
						mpd_levels = ['MPD Level'].concat( _.map( _.pluck( data, 'mpd_level' ), function ( num ) {
							return $filter( 'percent' )( num, 2, false );
						} ) );
					return _.zip( iso_codes, mpd_levels );
				}]
			},
			views:   {
				'@app': {
					templateUrl: 'app/states/dashboard/countries/countries.html',
					controller:  'CountriesController as countries'
				}
			}
		} );
	}] );

})( angular
	.module( 'mpdDashboard.states.dashboard.countries', [
		// Dependencies
		'ui.router',
		'angular-growl',
		'googlechart',
		'mpdDashboard.components.googlechart.regionClick',
		'mpdDashboard.components.percent',

		// API
		'mpdDashboard.api.countries',

		// Dependent States
		'mpdDashboard.states.dashboard',
		'mpdDashboard.states.dashboard.country',
		'mpdDashboard.states.unauthorized'
	] ) );

(function ( module ) {
	'use strict';

	module.config( ["$stateProvider", function ( $stateProvider ) {

		$stateProvider.state( 'country', {
			parent:  'dashboard',
			url:     'country/{id:int}',
			resolve: {
				'hasCountry':       ["$state", "$stateParams", "permissions", function ( $state, $stateParams, permissions ) {
					var country = _.findWhere( permissions.countries, {id: $stateParams.id} );
					if ( angular.isUndefined( country ) ) {
						$state.go( 'unauthorized' );
					}
					return country;
				}],
				'country':          ["$q", "$state", "$stateParams", "Countries", "estimated", "hasCountry", function ( $q, $state, $stateParams, Countries, estimated, hasCountry ) {
					var deferred = $q.defer();
					Countries
						.get(
							estimated.estimated ? {
								id:        $stateParams.id,
								estimated: true
							} : {id: $stateParams.id}
						)
						.$promise
						.then( function ( country ) {
							deferred.resolve( country );
						}, function () {
							$state.go( 'unauthorized' );
						} );
					return deferred.promise;
				}],
				'mpdHealthData':    ["country", function ( country ) {
					return [
						['Support Level', 'Percentage Raised'],
						['> 100%', country.attributes.mpd_health[0].length],
						['80 - 100%', country.attributes.mpd_health[1].length],
						['50 - 80%', country.attributes.mpd_health[2].length],
						['< 50%', country.attributes.mpd_health[3].length],
						['No Budget', country.attributes.mpd_health[4].length]
					];
				}],
				'supportTrendData': ["$window", "$q", "googleChartApiPromise", "country", function ( $window, $q, googleChartApiPromise, country ) {
					var deferred = $q.defer();
					googleChartApiPromise.then( function () {
						var average_support = _.map( country.attributes.average_support, function ( data ) {
							data[0] = new Date( data[0] );
							return data;
						} );
						var data = $window.google.visualization.arrayToDataTable(
							[['Period', 'Average Support Level', 'Staff with more than 90%']].concat( average_support )
						);

						var dateFormat = new $window.google.visualization.DateFormat( {
							pattern: 'MMM y'
						} );
						dateFormat.format( data, 0 );

						var percentFormat = new $window.google.visualization.NumberFormat( {
							pattern:        '#,###%',
							fractionDigits: 2
						} );
						percentFormat.format( data, 1 );
						percentFormat.format( data, 2 );

						deferred.resolve( data );
					}, function () {
						deferred.reject();
					} );
					return deferred.promise;
				}]
			},
			views:   {
				'@app':      {
					templateUrl: 'app/states/dashboard/country/country.html',
					controller:  'CountryController as country'
				},
				'title@app': {
					template:   '<span>{{name}}</span>',
					controller: ["$scope", "country", function ( $scope, country ) {
						$scope.name = country.attributes.name;
					}]
				}
			}
		} );
	}] );

})( angular
	.module( 'mpdDashboard.states.dashboard.country', [
		// Dependencies
		'ui.router',
		'angular-growl',
		'googlechart',
		'mpdDashboard.components.percent',

		// API
		'mpdDashboard.api.countries',

		// Dependent States
		'mpdDashboard.states.dashboard',
		'mpdDashboard.states.dashboard.staffAccount',
		'mpdDashboard.states.unauthorized'
	] ) );

(function ( module ) {
	'use strict';

	module.config( ["$stateProvider", function ( $stateProvider ) {

		$stateProvider.state( 'staffAccount', {
			parent:  'dashboard',
			url:     'staff/{id:int}',
			resolve: {
				'account':             ["$q", "$state", "$stateParams", "Staff", "estimated", "permissions", function ( $q, $state, $stateParams, Staff, estimated, permissions ) {
					var deferred = $q.defer();
					Staff
						.get(
							estimated.estimated ? {
								id:        $stateParams.id,
								estimated: true
							} : {id: $stateParams.id}
						)
						.$promise
						.then( function ( account ) {
							deferred.resolve( account );
						}, function () {
							$state.go( 'unauthorized' );
						} );
					return deferred.promise;
				}],
				'budgetTrendData':     ["$window", "$q", "googleChartApiPromise", "account", function ( $window, $q, googleChartApiPromise, account ) {
					var deferred = $q.defer();
					googleChartApiPromise.then( function () {
						var budget_trend = _.map( account.attributes.budget_trend, function ( data ) {
							data[0] = new Date( data[0] );
							return data;
						} );
						var data = $window.google.visualization.arrayToDataTable(
							[['Month', 'Balance', 'Income', 'To Raise', 'Expenses', 'Expense Budget']].concat( budget_trend )
						);

						var dateFormat = new $window.google.visualization.DateFormat( {
							pattern: 'MMM y'
						} );
						dateFormat.format( data, 0 );

						deferred.resolve( data );
					}, function () {
						deferred.reject();
					} );
					return deferred.promise;
				}],
				'incomeBreakdownData': ["account", function ( account ) {
					return [['Income Type', 'Amount']].concat( account.attributes.income );
				}]
			},
			views:   {
				'@app': {
					templateUrl: 'app/states/dashboard/staff-account/staff-account.html',
					controller:  'StaffAccountController as staffAccountCtrl'
				},
				'title@app': {
					template:   '<span>{{name}}</span>',
					controller: ["$scope", "account", function ( $scope, account ) {
						$scope.name = account.attributes.name;
					}]
				}
			}
		} );
	}] );

})( angular
	.module( 'mpdDashboard.states.dashboard.staffAccount', [
		// Dependencies
		'ui.router',
		'angular-growl',
		'googlechart',
		'ui.bootstrap.dropdown',
		'mpdDashboard.components.percent',

		// API
		'mpdDashboard.api.staff',

		// Dependent States
		'mpdDashboard.states.dashboard.country',
		'mpdDashboard.states.unauthorized'
	] ) );

(function ( module ) {
	'use strict';

	// Enable html5mode
	module.config( ["$locationProvider", function ( $locationProvider ) {
		$locationProvider.html5Mode( true );
	}] );

	// Initialize Application Settings
	module.config( ["SettingsProvider", function ( SettingsProvider ) {
		SettingsProvider.setConfig( window.MPDDashboard.config );
	}] );

	// Configure Debug Logging
	module.config( ["$logProvider", "SettingsProvider", function ( $logProvider, SettingsProvider ) {
		$logProvider.debugEnabled( SettingsProvider.isDevelopment() );
	}] );

	// Configure Cas Authenticated Api
	module.config( ["casAuthApiProvider", "SettingsProvider", function ( casAuthApiProvider, SettingsProvider ) {
		casAuthApiProvider
			.setRequireAccessToken( true )
			.setCacheAccessToken( true )
			.setAuthenticationApiBaseUrl( SettingsProvider.casAuthApiBaseUrl() )
			.setTicketUrl( SettingsProvider.ticketUrl() );
	}] );

	// Configure Growl
	module.config( ["growlProvider", function ( growlProvider ) {
		growlProvider.globalPosition( 'top-right' );
		growlProvider.globalDisableCountDown( true );
		growlProvider.globalTimeToLive( {success: 10000, error: -1, warning: -1, info: 10000} );
	}] );

	// Register managed API with casAuthApi
	module.run( ["casAuthApi", "Settings", function ( casAuthApi, Settings ) {
		casAuthApi.addManagedApi( Settings.api.mpdDashboard() );
	}] );

	module.run( ["$log", "$rootScope", function ( $log, $rootScope ) {
		$rootScope.$on( '$stateChangeStart', function () {
			angular.element( 'div.loading' ).removeClass( 'hide' );
		} );
		$rootScope.$on( '$stateChangeSuccess', function () {
			angular.element( 'div.loading' ).addClass( 'hide' );
		} );
		$rootScope.$on( '$stateChangeError', function ( event, toState, toParams, fromState, fromParams, error ) {
			$log.error( '$stateChangeError:', toState, toParams, error );
		} );
	}] );

})( angular.module( 'mpdDashboard' ) );

/**
 GET /countries?estimated=(false|true)

 Fetch a list of countries (ministries technically) and corresponding mpd status using either actual or estimated budgets.
 If estimated is missing, assume false.

 Response:
 [
 {
	 name: "Chile",     // Country Name
	 min_code: "CHL"       // Ministry Code
	 iso_code: "CL",       // ISO 3166 alpha-2
	 mpd_level: 0.72,        // MPD Level used in geochart
	 staff_with_budget: 0, // Staff with a budget (%)
	 staff_raised: [       // % of Staff who have raised
		 0,    // Less than 50%
		 0.75, // 50 to 80%
		 0.25, // 80 to 100%
		 0     // Greater than 100%
	 ],
	 budget_spent: 1,      // % of Expense Budget Spent
	 raised_locally: 0.7   // Support raised locally (%)
 },
 ...
 ]
 */

(function ( module ) {
	'use strict';
	module.factory( 'Countries', ["$log", "$resource", "Settings", function ( $log, $resource, Settings ) {
		var returnDataAttr = function ( response ) {
			return response.data.data;
		};

		return $resource( Settings.api.mpdDashboard( '/countries/:id' ), {}, {
			query: {method: 'GET', interceptor: {response: returnDataAttr}},
			get:   {method: 'GET', interceptor: {response: returnDataAttr}}
		} );
	}] );

})( angular.module( 'mpdDashboard.api.countries', ['ngResource'] ) );

/**
 GET /account?min_code=(min_code)&person_id=(person_id)&estimated=(true|false)

 Returns mpd data for the selected staff account at the given ministry

 Response:
 {
 	name: "Babyvic Spomaul",
 	person_id: "uuid",
 	min_code: "RUS",
 	mpd_analysis: 0.8, // red/yellow/green traffic light, possibly number between 0 and 1?
 	average_support:[
 		0.964, // Year
 		0.991, // Quarter
 		1.116 // Month
 	],
 	income: [
 		// ['Income Type', 'Amount'],
		['Local Income', 6672.95],
		['Foreign Income', 0.00],
		['Subsidy', 0.00]
 	],
	budget_trend: [
		// [ 'Month', 'Balance', 'Income', 'To Raise', 'Expenses', 'Expense Budget' ]
		['2015-04', 31866.54, 3076.00, 0.00, 5188.74, 0.00 ],
		[ ... ],
		[ ... ],
		[ ... ]
	]
 }
 */

(function ( module ) {
	'use strict';
	module.factory( 'Staff', ["$log", "$resource", "Settings", function ( $log, $resource, Settings ) {
		var returnDataAttr = function ( response ) {
			return response.data.data;
		};

		return $resource( Settings.api.mpdDashboard( '/staff/:id' ), {}, {
			get: {method: 'GET', interceptor: {response: returnDataAttr}},
			remove: {method: 'DELETE', interceptor: {response: returnDataAttr}}
		} );
	}] );

})( angular.module( 'mpdDashboard.api.staff', ['ngResource'] ) );

(function ( module ) {
	'use strict';

	module.factory( 'User', ["$log", "$resource", "Settings", function ( $log, $resource, Settings ) {
		var returnDataAttr = function ( response ) {
			return response.data.data;
		};

		return $resource( Settings.api.mpdDashboard( '/user' ), {}, {
			get: {method: 'GET', interceptor: {response: returnDataAttr}}
		} );
	}] );

})( angular.module( 'mpdDashboard.api.user', ['ngResource'] ) );

(function ( module ) {
	'use strict';

	module.filter( 'percent', ["$window", function ( $window ) {
		return function ( input, decimals, suffix ) {
			decimals = angular.isNumber( decimals ) ? decimals : 2;
			if ( angular.isUndefined( suffix ) ) {
				suffix = '%';
			}
			if ( $window.isNaN( input ) ) {
				return '';
			}
			return Math.round( input * Math.pow( 10, decimals + 2 ) ) / Math.pow( 10, decimals ) + (suffix ? suffix : 0)
		};
	}] );

})( angular.module( 'mpdDashboard.components.percent', [] ) );


(function ( module ) {
	'use strict';

	module.provider( 'Settings', function () {
		var config = {};

		this.setConfig = function ( c ) {
			config = c;
		};

		this.isDevelopment = function () {
			return config.environment === 'development';
		};

		this.casAuthApiBaseUrl = function() {
			return config.api.casAuthApi;
		};

		this.ticketUrl = function() {
			return config.api.refresh;
		};

		function apiUrl( base, path ) {
			if ( typeof path === 'undefined' ) return base;
			return ( path.indexOf( '/' ) === 0 )
				? base + path
				: base + '/' + path;
		}

		this.$get = function () {
			return {
				api: {
					mpdDashboard: function ( path ) {
						return apiUrl( config.api.mpdDashboard, path );
					}
				}
			};
		}
	} );

})( angular.module( 'mpdDashboard.settingsService', [] ) );

(function ( module ) {
	'use strict';

	module.directive( 'regionClick', ["$log", function ( $log ) {
		return {
			restrict: 'A',
			scope:    false,
			require:  'googleChart',
			link:     function ( scope, element, attrs, googleChartController ) {
				function callback( chartWrapper, chart, args ) {
					callback.$inject = ['chartWrapper', 'chart', 'args'];
					var returnValues = {
						chartWrapper: chartWrapper,
						chart:        chart,
						args:         args,
						region:       args[0].region
					};
					scope.$apply( function () {
						scope.$eval( attrs.regionClick, returnValues );
					} );
				}

				googleChartController.registerChartListener( 'regionClick', callback, this );
			}
		};
	}] );

})( angular.module( 'mpdDashboard.components.googlechart.regionClick', [
	'googlechart'
] ) );

(function ( module ) {
	'use strict';

	function EstimatedToggleController( $scope, $state, estimated ) {
		var self = this;
		this.model = estimated;

		$scope.$watch( function ( $scope ) {
			return self.model.estimated
		}, function ( newVal, oldVal ) {
			$state.go( $state.current, {estimated: newVal} );
		} );
	}
	EstimatedToggleController.$inject = ["$scope", "$state", "estimated"];

	module.controller( 'EstimatedToggleController', EstimatedToggleController );

})( angular.module( 'mpdDashboard.states.dashboard' ) );

(function ( module ) {
	'use strict';

	function NavigationController( $log, $state, permissions ) {
		this.$state = $state;
		this.countries = permissions.countries;
		this.accounts = permissions.accounts;
	}
	NavigationController.$inject = ["$log", "$state", "permissions"];

	module.controller( 'NavigationController', NavigationController );

})( angular.module( 'mpdDashboard.states.dashboard' ) );

(function ( module ) {
	'use strict';

	function CountriesController( $log, $window, $state, countries, geodata ) {
		this.$state = $state;
		this.countries = countries;
		this.geochart = {
			type:    'GeoChart',
			data:    geodata,
			options: {
				// Fetch backgroundColor for containing div background
				backgroundColor: $window.jQuery( '.dashboard-well' ).css( 'backgroundColor' ),
				colorAxis:       {
					minValue: 50,
					maxValue: 100,
					colors:   [
						$window.jQuery( '.countries-geochart-colors .danger' ).css( 'backgroundColor' ),
						$window.jQuery( '.countries-geochart-colors .warning' ).css( 'backgroundColor' ),
						$window.jQuery( '.countries-geochart-colors .success' ).css( 'backgroundColor' )
					]
				}
			}
		};
	}
	CountriesController.$inject = ["$log", "$window", "$state", "countries", "geodata"];

	CountriesController.prototype.onReady = function ( chartWrapper ) {
		// This fixes the issue initially, but any region mouseover /click break it.

		// Fixes issue with gradients and HTML <base> tag
		// @see https://github.com/google/google-visualization-issues/issues/2000
		jQuery( chartWrapper.getContainerId() ).find( 'svg' ).each( function () {
			jQuery( this ).find( "g" ).each( function () {
				if ( jQuery( this ).attr( 'clip-path' ) ) {
					if ( jQuery( this ).attr( 'clip-path' ).indexOf( 'url(#' ) == -1 ) {
						return;
					}
					jQuery( this ).attr( 'clip-path', 'url(' + document.location + jQuery( this ).attr( 'clip-path' ).substring( 4 ) )
				}
			} );
			jQuery( this ).find( "rect" ).each( function () {
				if ( jQuery( this ).attr( 'fill' ) ) {
					if ( jQuery( this ).attr( 'fill' ).indexOf( 'url(#' ) == -1 ) {
						return;
					}
					jQuery( this ).attr( 'fill', 'url(' + document.location + jQuery( this ).attr( 'fill' ).substring( 4 ) )
				}
			} );
		} );
	};

	CountriesController.prototype.onRegionClick = function ( region ) {
		var country = _.filter( this.countries, function ( obj ) {
			return obj.attributes.iso_code === region;
		} ).pop();
		if ( angular.isDefined( country ) ) {
			this.$state.go( 'country', {id: country.id} );
		}
	};

	module.controller( 'CountriesController', CountriesController );

})( angular.module( 'mpdDashboard.states.dashboard.countries' ) );

(function ( module ) {
	'use strict';

	function CountryController( $log, $window, $state, mpdHealthData, supportTrendData, country ) {
		this.$state = $state;

		this.mpdHealth = {
			type:    'PieChart',
			data:    mpdHealthData,
			options: {
				pieHole:             0.4, reverseCategories: false,
				chartArea:           {
					left:   60,
					top:    20,
					width:  "120%",
					height: "90%"
				},
				legend:              {
					textStyle: {
						color: 'white'
					}
				},
				backgroundColor:     $window.jQuery( '.mpd-health' ).css( 'backgroundColor' ),
				pieSliceBorderColor: $window.jQuery( '.mpd-health' ).css( 'backgroundColor' ),
				slices:              [
					{color: $window.jQuery( '.mpd-health .chart-colors .color1' ).css( 'backgroundColor' )},
					{color: $window.jQuery( '.mpd-health .chart-colors .color2' ).css( 'backgroundColor' )},
					{color: $window.jQuery( '.mpd-health .chart-colors .color3' ).css( 'backgroundColor' )},
					{color: $window.jQuery( '.mpd-health .chart-colors .color4' ).css( 'backgroundColor' )},
					{color: $window.jQuery( '.mpd-health .chart-colors .color5' ).css( 'backgroundColor' )}
				]
			}
		};

		this.supportTrend = {
			type:    'LineChart',
			data:    supportTrendData,
			options: {
				legend:          {
					textStyle: {
						color: 'white'
					}
				},
				backgroundColor: $window.jQuery( '.support-trend' ).css( 'backgroundColor' ),
				colors:          [
					$window.jQuery( '.support-trend .chart-colors .color1' ).css( 'backgroundColor' ),
					$window.jQuery( '.support-trend .chart-colors .color2' ).css( 'backgroundColor' )
				],
				lineWidth:       3,
				pointSize:       4,
				hAxis:           {baselineColor: 'white', format: 'MMM y', textStyle: {color: 'white'}},
				vAxis:           {baselineColor: 'white', format: 'percent', textStyle: {color: 'white'}}
			}
		};

		this.onMpdHealthSelect = function ( selectedItem ) {
			if ( angular.isUndefined( selectedItem ) ) {
				delete this.staff;
			}
			else {
				this.staffHeading = mpdHealthData[selectedItem.row + 1][0];
				this.staff = country.attributes.mpd_health[selectedItem.row];
			}
		}
	}
	CountryController.$inject = ["$log", "$window", "$state", "mpdHealthData", "supportTrendData", "country"];

	module.controller( 'CountryController', CountryController );

})( angular.module( 'mpdDashboard.states.dashboard.country' ) );

(function ( module ) {
	'use strict';

	function StaffAccountController( $log, $window, $state, account, budgetTrendData, incomeBreakdownData, Staff ) {
		var budgetTrendDiv        = $window.jQuery( '.budget-trend' ),
			incomeBreakdownDiv    = $window.jQuery( '.income-breakdown' ),
			backgroundColor       = budgetTrendDiv.css( 'backgroundColor' ),
			textColor             = budgetTrendDiv.css( 'color' ),
			trendColors           = [
				budgetTrendDiv.find( '.color1' ).css( 'backgroundColor' ),
				budgetTrendDiv.find( '.color2' ).css( 'backgroundColor' ),
				budgetTrendDiv.find( '.color3' ).css( 'backgroundColor' ),
				budgetTrendDiv.find( '.color4' ).css( 'backgroundColor' ),
				budgetTrendDiv.find( '.color5' ).css( 'backgroundColor' )
			],
			incomeBreakdownColors = [
				incomeBreakdownDiv.find( '.color1' ).css( 'backgroundColor' ),
				incomeBreakdownDiv.find( '.color2' ).css( 'backgroundColor' ),
				incomeBreakdownDiv.find( '.color3' ).css( 'backgroundColor' )
			];

		this.$state = $state;
		this.mpdAnalysis = account.attributes.mpd_analysis;
		this.averageSupport = account.attributes.average_support;
		this.incorrect_association = account.attributes.incorrect_association;

		this.budgetTrend = {
			type:    'LineChart',
			data:    budgetTrendData,
			view:    {
				columns: [0, 1, 2, 3, 4, 5]
			},
			options: {
				legend:          {
					textStyle: {
						color: 'white'
					}
				},
				backgroundColor: backgroundColor,
				colors:          angular.copy( trendColors ),
				lineWidth:       3,
				series:          {
					2: {
						lineDashStyle: [10, 6]
					},
					4: {
						lineDashStyle: [10, 6]
					}
				},
				hAxis:           {baselineColor: textColor, textStyle: {color: textColor}},
				vAxis:           {baselineColor: textColor, textStyle: {color: textColor}}
			}
		};

		this.hideTrendSeries = function ( selectedItem ) {
			if ( angular.isUndefined( selectedItem ) ) return;
			var col = selectedItem.column;
			if ( selectedItem.row === null ) {

				// If series is enabled, disable it
				if ( this.budgetTrend.view.columns[col] == col ) {
					this.budgetTrend.view.columns[col] = {
						label: budgetTrendData.getColumnLabel( col ),
						type:  budgetTrendData.getColumnType( col ),
						calc:  function () {
							return null;
						}
					};
					this.budgetTrend.options.colors[col - 1] = '#CCCCCC';
				}
				else {
					this.budgetTrend.view.columns[col] = col;
					this.budgetTrend.options.colors[col - 1] = trendColors[col - 1];
				}
			}
		};

		this.incomeBreakdown = {
			type:    'PieChart',
			data:    incomeBreakdownData,
			options: {
				pieHole:             0.4,
				reverseCategories:   false,
				chartArea:           {
					left:   60,
					top:    20,
					width:  "120%",
					height: "90%"
				},
				legend:              {
					textStyle: {
						color: textColor
					}
				},
				backgroundColor:     backgroundColor,
				pieSliceBorderColor: backgroundColor,
				slices:              [
					{color: incomeBreakdownColors[0]},
					{color: incomeBreakdownColors[1]},
					{color: incomeBreakdownColors[2]}
				]
			}
		};

		this.reportIncorrectAssociation = function () {
			var self = this;
			Staff
				.remove( {id: account.id} )
				.$promise
				.then( function ( acct ) {
					self.incorrect_association = true;
				}, function () {
				} );
		}
	}
	StaffAccountController.$inject = ["$log", "$window", "$state", "account", "budgetTrendData", "incomeBreakdownData", "Staff"];

	module.controller( 'StaffAccountController', StaffAccountController );

})( angular.module( 'mpdDashboard.states.dashboard.staffAccount' ) );

//# sourceMappingURL=app.min.js.map
