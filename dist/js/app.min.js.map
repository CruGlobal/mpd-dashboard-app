{"version":3,"sources":["app.module.js","states/app.state.js","states/dashboard/dashboard.state.js","states/unauthorized/unauthorized.state.js","states/dashboard/countries/countries.state.js","states/dashboard/country/country.state.js","states/dashboard/staff-account/staff-account.state.js","app.config.js","api/countries.service.js","api/staff.service.js","api/user.service.js","components/percent.filter.js","settings/settings.service.js","components/googlechart/region-click.directive.js","states/dashboard/estimated-toggle.controller.js","app.min.js","states/dashboard/navigation.controller.js","states/dashboard/countries/countries.controller.js","states/dashboard/country/country.controller.js","states/dashboard/staff-account/staff-account.controller.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","abstract","url","resolve","user","$log","$q","$state","User","get","$promise","templateUrl","parent","permissions","deferred","defer","hasCountries","attributes","countries","length","hasAccounts","accounts","go","reject","promise","estimated","$stateParams","views","footer@app","template","controller","$scope","navbarForm@app","navigation@app","params","value","squash","then","_","sortBy","country","first","id","account","@app","console","log","message","isDefined","undefined","Countries","query","geodata","$filter","data","pluck","obj","isUndefined","iso_code","isNull","iso_codes","concat","mpd_levels","map","num","zip","hasCountry","findWhere","mpdHealthData","mpd_health","supportTrendData","$window","googleChartApiPromise","average_support","Date","google","visualization","arrayToDataTable","dateFormat","DateFormat","pattern","format","percentFormat","NumberFormat","fractionDigits","title@app","name","Staff","budgetTrendData","budget_trend","incomeBreakdownData","income","$locationProvider","html5Mode","SettingsProvider","setConfig","window","MPDDashboard","$logProvider","debugEnabled","isDevelopment","casAuthApiProvider","setRequireAccessToken","setCacheAccessToken","setAuthenticationApiBaseUrl","casAuthApiBaseUrl","setTicketUrl","ticketUrl","growlProvider","globalPosition","globalDisableCountDown","globalTimeToLive","success","error","warning","info","run","casAuthApi","Settings","addManagedApi","api","mpdDashboard","$rootScope","$on","element","removeClass","addClass","event","toState","toParams","fromState","fromParams","factory","$resource","returnDataAttr","response","method","interceptor","remove","filter","input","decimals","suffix","isNumber","isNaN","Math","round","pow","provider","apiUrl","base","path","indexOf","this","c","environment","refresh","$get","directive","restrict","scope","require","link","attrs","googleChartController","callback","chartWrapper","chart","args","$inject","returnValues","region","$apply","$eval","regionClick","registerChartListener","EstimatedToggleController","self","model","$watch","newVal","oldVal","current","NavigationController","CountriesController","geochart","type","options","backgroundColor","jQuery","css","colorAxis","minValue","maxValue","colors","prototype","onReady","getContainerId","find","each","attr","document","location","substring","onRegionClick","pop","CountryController","mpdHealth","pieHole","reverseCategories","chartArea","left","top","width","height","legend","textStyle","color","pieSliceBorderColor","slices","supportTrend","lineWidth","pointSize","hAxis","baselineColor","vAxis","onMpdHealthSelect","selectedItem","staff","staffHeading","row","StaffAccountController","budgetTrendDiv","incomeBreakdownDiv","textColor","trendColors","incomeBreakdownColors","mpdAnalysis","mpd_analysis","averageSupport","incorrect_association","budgetTrend","view","columns","copy","series",2,"lineDashStyle",4,"hideTrendSeries","col","column","label","getColumnLabel","getColumnType","calc","incomeBreakdown","reportIncorrectAssociation","acct"],"mappings":"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","file":"app.min.js","sourcesContent":["(function () {\n\t'use strict';\n\n\tangular.module( 'mpdDashboard', [\n\t\t// Dependencies\n\t\t'gettext',\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'cas-auth-api',\n\t\t'mpdDashboard.settingsService',\n\n\t\t// States\n\t\t'mpdDashboard.states.dashboard.countries'\n\t] );\n})();\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.config( function ( $stateProvider, $urlRouterProvider ) {\n\t\t$urlRouterProvider.otherwise( '/countries' );\n\n\t\t$stateProvider.state( 'app', {\n\t\t\tabstract:    true,\n\t\t\turl:         '/',\n\t\t\tresolve:     {\n\t\t\t\t'user': function ( $log, $q, $state, User ) {\n\t\t\t\t\treturn User.get().$promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttemplateUrl: 'app/states/app.html'\n\t\t} );\n\t} );\n\n})( angular\n\t.module( 'mpdDashboard.states.app', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'ui.bootstrap.collapse',\n\t\t'ui.bootstrap.dropdown',\n\n\t\t// APIs\n\t\t'mpdDashboard.api.user',\n\n\t\t// States\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.config( function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'dashboard', {\n\t\t\tabstract: true,\n\t\t\tparent:   'app',\n\t\t\turl:      '?estimated',\n\t\t\tresolve:  {\n\t\t\t\t'permissions': function ( $q, $state, user ) {\n\t\t\t\t\tvar deferred     = $q.defer(),\n\t\t\t\t\t\thasCountries = user.attributes.permissions.countries.length !== 0,\n\t\t\t\t\t\thasAccounts  = user.attributes.permissions.accounts.length !== 0;\n\n\t\t\t\t\tif ( hasCountries || hasAccounts ) {\n\t\t\t\t\t\tdeferred.resolve( user.attributes.permissions );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\tdeferred.reject( 'unauthorized' );\n\t\t\t\t\t}\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t},\n\t\t\t\t'estimated':   function ( $stateParams ) {\n\t\t\t\t\treturn {estimated: $stateParams.estimated === 'false' ? false : true};\n\t\t\t\t}\n\t\t\t},\n\t\t\tviews:    {\n\t\t\t\t'footer@app':     {\n\t\t\t\t\ttemplate:   '<div ng-if=\"estimated.estimated\" class=\"alert alert-estimated\">*Based on estimated budget(s)</div>',\n\t\t\t\t\tcontroller: function ( $scope, estimated ) {\n\t\t\t\t\t\t$scope.estimated = estimated;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'navbarForm@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/estimated-toggle.html',\n\t\t\t\t\tcontroller:  'EstimatedToggleController as toggle'\n\t\t\t\t},\n\t\t\t\t'navigation@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/navigation.html',\n\t\t\t\t\tcontroller:  'NavigationController as nav'\n\t\t\t\t}\n\t\t\t},\n\t\t\tparams:   {\n\t\t\t\testimated: {\n\t\t\t\t\tvalue:  'true',\n\t\t\t\t\tsquash: true\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'ui.bootstrap.buttons',\n\n\t\t// APIs\n\t\t'mpdDashboard.api.user',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.app'\n\t] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.config( function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'unauthorized', {\n\t\t\tparent:  'app',\n\t\t\turl:     '',\n\t\t\tresolve: {\n\t\t\t\t'permissions': function ( $q, $state, User ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tUser.get().$promise.then( function ( user ) {\n\t\t\t\t\t\tvar countries = _.sortBy( user.attributes.permissions.countries, 'name' ),\n\t\t\t\t\t\t\taccounts  = _.sortBy( user.attributes.permissions.accounts, 'name' );\n\t\t\t\t\t\tif ( countries.length === 0 && accounts.length === 0 ) {\n\t\t\t\t\t\t\tdeferred.resolve( true );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( countries.length !== 0 ) {\n\t\t\t\t\t\t\tif ( countries.length === 1 ) {\n\t\t\t\t\t\t\t\tvar country = _.first( countries );\n\t\t\t\t\t\t\t\t$state.go( 'country', {id: country.id} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t$state.go( 'countries' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar account = _.first( accounts );\n\t\t\t\t\t\t\t$state.go( 'staffAccount', {id: account.id} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tdeferred.resolve( true );\n\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/unauthorized/unauthorized.html',\n\t\t\t\t\tcontroller:  function ( $scope, permissions, $stateParams ) {\n\t\t\t\t\t\tconsole.log( $stateParams );\n\t\t\t\t\t\t// require permissions so it gets resolved\n\t\t\t\t\t\t$scope.message = angular.isDefined( $stateParams.message ) ? $stateParams.message : undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tmessage: null\n\t\t\t}\n\t\t} );\n\t} );\n\n})( angular\n\t.module( 'mpdDashboard.states.unauthorized', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.app',\n\t\t'mpdDashboard.states.dashboard.countries',\n\t\t'mpdDashboard.states.dashboard.staffAccount',\n\t\t'mpdDashboard.states.dashboard.country'\n\t] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.config( function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'countries', {\n\t\t\tparent:  'dashboard',\n\t\t\turl:     'countries',\n\t\t\tresolve: {\n\t\t\t\t'hasCountries': function ( $state, permissions ) {\n\t\t\t\t\tif ( permissions.countries.length === 0 ) {\n\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t}\n\t\t\t\t\treturn permissions.countries;\n\t\t\t\t},\n\t\t\t\t'countries':    function ( $log, $q, $state, Countries, estimated, hasCountries ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tCountries\n\t\t\t\t\t\t.query( estimated.estimated ? {estimated: true} : {} )\n\t\t\t\t\t\t.$promise\n\t\t\t\t\t\t.then( function ( countries ) {\n\t\t\t\t\t\t\tdeferred.resolve( countries );\n\t\t\t\t\t\t}, function () {\n\t\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t},\n\t\t\t\t'geodata':      function ( $log, $filter, countries ) {\n\t\t\t\t\tvar data       = _.reject( _.pluck( countries, 'attributes' ), function ( obj ) {\n\t\t\t\t\t\t\treturn angular.isUndefined( obj.iso_code ) || _.isNull( obj.iso_code ) || obj.iso_code === '';\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\tiso_codes  = ['Country'].concat( _.pluck( data, 'iso_code' ) ),\n\t\t\t\t\t\tmpd_levels = ['MPD Level'].concat( _.map( _.pluck( data, 'mpd_level' ), function ( num ) {\n\t\t\t\t\t\t\treturn $filter( 'percent' )( num, 2, false );\n\t\t\t\t\t\t} ) );\n\t\t\t\t\treturn _.zip( iso_codes, mpd_levels );\n\t\t\t\t}\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/countries/countries.html',\n\t\t\t\t\tcontroller:  'CountriesController as countries'\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard.countries', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'googlechart',\n\t\t'mpdDashboard.components.googlechart.regionClick',\n\t\t'mpdDashboard.components.percent',\n\n\t\t// API\n\t\t'mpdDashboard.api.countries',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.dashboard',\n\t\t'mpdDashboard.states.dashboard.country',\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.config( function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'country', {\n\t\t\tparent:  'dashboard',\n\t\t\turl:     'country/{id:int}',\n\t\t\tresolve: {\n\t\t\t\t'hasCountry':       function ( $state, $stateParams, permissions ) {\n\t\t\t\t\tvar country = _.findWhere( permissions.countries, {id: $stateParams.id} );\n\t\t\t\t\tif ( angular.isUndefined( country ) ) {\n\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t}\n\t\t\t\t\treturn country;\n\t\t\t\t},\n\t\t\t\t'country':          function ( $q, $state, $stateParams, Countries, estimated, hasCountry ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tCountries\n\t\t\t\t\t\t.get(\n\t\t\t\t\t\t\testimated.estimated ? {\n\t\t\t\t\t\t\t\tid:        $stateParams.id,\n\t\t\t\t\t\t\t\testimated: true\n\t\t\t\t\t\t\t} : {id: $stateParams.id}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.$promise\n\t\t\t\t\t\t.then( function ( country ) {\n\t\t\t\t\t\t\tdeferred.resolve( country );\n\t\t\t\t\t\t}, function () {\n\t\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t},\n\t\t\t\t'mpdHealthData':    function ( country ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t['Support Level', 'Percentage Raised'],\n\t\t\t\t\t\t['> 100%', country.attributes.mpd_health[0].length],\n\t\t\t\t\t\t['80 - 100%', country.attributes.mpd_health[1].length],\n\t\t\t\t\t\t['50 - 80%', country.attributes.mpd_health[2].length],\n\t\t\t\t\t\t['< 50%', country.attributes.mpd_health[3].length],\n\t\t\t\t\t\t['No Budget', country.attributes.mpd_health[4].length]\n\t\t\t\t\t];\n\t\t\t\t},\n\t\t\t\t'supportTrendData': function ( $window, $q, googleChartApiPromise, country ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tgoogleChartApiPromise.then( function () {\n\t\t\t\t\t\tvar average_support = _.map( country.attributes.average_support, function ( data ) {\n\t\t\t\t\t\t\tdata[0] = new Date( data[0] );\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tvar data = $window.google.visualization.arrayToDataTable(\n\t\t\t\t\t\t\t[['Period', 'Average Support Level', 'Staff with more than 90%']].concat( average_support )\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tvar dateFormat = new $window.google.visualization.DateFormat( {\n\t\t\t\t\t\t\tpattern: 'MMM y'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdateFormat.format( data, 0 );\n\n\t\t\t\t\t\tvar percentFormat = new $window.google.visualization.NumberFormat( {\n\t\t\t\t\t\t\tpattern:        '#,###%',\n\t\t\t\t\t\t\tfractionDigits: 2\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tpercentFormat.format( data, 1 );\n\t\t\t\t\t\tpercentFormat.format( data, 2 );\n\n\t\t\t\t\t\tdeferred.resolve( data );\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app':      {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/country/country.html',\n\t\t\t\t\tcontroller:  'CountryController as country'\n\t\t\t\t},\n\t\t\t\t'title@app': {\n\t\t\t\t\ttemplate:   '<span>{{name}}</span>',\n\t\t\t\t\tcontroller: function ( $scope, country ) {\n\t\t\t\t\t\t$scope.name = country.attributes.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard.country', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'googlechart',\n\t\t'mpdDashboard.components.percent',\n\n\t\t// API\n\t\t'mpdDashboard.api.countries',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.dashboard',\n\t\t'mpdDashboard.states.dashboard.staffAccount',\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.config( function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'staffAccount', {\n\t\t\tparent:  'dashboard',\n\t\t\turl:     'staff/{id:int}',\n\t\t\tresolve: {\n\t\t\t\t'account':             function ( $q, $state, $stateParams, Staff, estimated, permissions ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tStaff\n\t\t\t\t\t\t.get(\n\t\t\t\t\t\t\testimated.estimated ? {\n\t\t\t\t\t\t\t\tid:        $stateParams.id,\n\t\t\t\t\t\t\t\testimated: true\n\t\t\t\t\t\t\t} : {id: $stateParams.id}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.$promise\n\t\t\t\t\t\t.then( function ( account ) {\n\t\t\t\t\t\t\tdeferred.resolve( account );\n\t\t\t\t\t\t}, function () {\n\t\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t},\n\t\t\t\t'budgetTrendData':     function ( $window, $q, googleChartApiPromise, account ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tgoogleChartApiPromise.then( function () {\n\t\t\t\t\t\tvar budget_trend = _.map( account.attributes.budget_trend, function ( data ) {\n\t\t\t\t\t\t\tdata[0] = new Date( data[0] );\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tvar data = $window.google.visualization.arrayToDataTable(\n\t\t\t\t\t\t\t[['Month', 'Balance', 'Income', 'To Raise', 'Expenses', 'Expense Budget']].concat( budget_trend )\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tvar dateFormat = new $window.google.visualization.DateFormat( {\n\t\t\t\t\t\t\tpattern: 'MMM y'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdateFormat.format( data, 0 );\n\n\t\t\t\t\t\tdeferred.resolve( data );\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t},\n\t\t\t\t'incomeBreakdownData': function ( account ) {\n\t\t\t\t\treturn [['Income Type', 'Amount']].concat( account.attributes.income );\n\t\t\t\t}\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/staff-account/staff-account.html',\n\t\t\t\t\tcontroller:  'StaffAccountController as staffAccountCtrl'\n\t\t\t\t},\n\t\t\t\t'title@app': {\n\t\t\t\t\ttemplate:   '<span>{{name}}</span>',\n\t\t\t\t\tcontroller: function ( $scope, account ) {\n\t\t\t\t\t\t$scope.name = account.attributes.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard.staffAccount', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'googlechart',\n\t\t'ui.bootstrap.dropdown',\n\t\t'mpdDashboard.components.percent',\n\n\t\t// API\n\t\t'mpdDashboard.api.staff',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.dashboard.country',\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n","(function ( module ) {\n\t'use strict';\n\n\t// Enable html5mode\n\tmodule.config( function ( $locationProvider ) {\n\t\t$locationProvider.html5Mode( true );\n\t} );\n\n\t// Initialize Application Settings\n\tmodule.config( function ( SettingsProvider ) {\n\t\tSettingsProvider.setConfig( window.MPDDashboard.config );\n\t} );\n\n\t// Configure Debug Logging\n\tmodule.config( function ( $logProvider, SettingsProvider ) {\n\t\t$logProvider.debugEnabled( SettingsProvider.isDevelopment() );\n\t} );\n\n\t// Configure Cas Authenticated Api\n\tmodule.config( function ( casAuthApiProvider, SettingsProvider ) {\n\t\tcasAuthApiProvider\n\t\t\t.setRequireAccessToken( true )\n\t\t\t.setCacheAccessToken( true )\n\t\t\t.setAuthenticationApiBaseUrl( SettingsProvider.casAuthApiBaseUrl() )\n\t\t\t.setTicketUrl( SettingsProvider.ticketUrl() );\n\t} );\n\n\t// Configure Growl\n\tmodule.config( function ( growlProvider ) {\n\t\tgrowlProvider.globalPosition( 'top-right' );\n\t\tgrowlProvider.globalDisableCountDown( true );\n\t\tgrowlProvider.globalTimeToLive( {success: 10000, error: -1, warning: -1, info: 10000} );\n\t} );\n\n\t// Register managed API with casAuthApi\n\tmodule.run( function ( casAuthApi, Settings ) {\n\t\tcasAuthApi.addManagedApi( Settings.api.mpdDashboard() );\n\t} );\n\n\tmodule.run( function ( $log, $rootScope ) {\n\t\t$rootScope.$on( '$stateChangeStart', function () {\n\t\t\tangular.element( 'div.loading' ).removeClass( 'hide' );\n\t\t} );\n\t\t$rootScope.$on( '$stateChangeSuccess', function () {\n\t\t\tangular.element( 'div.loading' ).addClass( 'hide' );\n\t\t} );\n\t\t$rootScope.$on( '$stateChangeError', function ( event, toState, toParams, fromState, fromParams, error ) {\n\t\t\t$log.error( '$stateChangeError:', toState, toParams, error );\n\t\t} );\n\t} );\n\n})( angular.module( 'mpdDashboard' ) );\n","/**\n GET /countries?estimated=(false|true)\n\n Fetch a list of countries (ministries technically) and corresponding mpd status using either actual or estimated budgets.\n If estimated is missing, assume false.\n\n Response:\n [\n {\n\t name: \"Chile\",     // Country Name\n\t min_code: \"CHL\"       // Ministry Code\n\t iso_code: \"CL\",       // ISO 3166 alpha-2\n\t mpd_level: 0.72,        // MPD Level used in geochart\n\t staff_with_budget: 0, // Staff with a budget (%)\n\t staff_raised: [       // % of Staff who have raised\n\t\t 0,    // Less than 50%\n\t\t 0.75, // 50 to 80%\n\t\t 0.25, // 80 to 100%\n\t\t 0     // Greater than 100%\n\t ],\n\t budget_spent: 1,      // % of Expense Budget Spent\n\t raised_locally: 0.7   // Support raised locally (%)\n },\n ...\n ]\n */\n\n(function ( module ) {\n\t'use strict';\n\tmodule.factory( 'Countries', function ( $log, $resource, Settings ) {\n\t\tvar returnDataAttr = function ( response ) {\n\t\t\treturn response.data.data;\n\t\t};\n\n\t\treturn $resource( Settings.api.mpdDashboard( '/countries/:id' ), {}, {\n\t\t\tquery: {method: 'GET', interceptor: {response: returnDataAttr}},\n\t\t\tget:   {method: 'GET', interceptor: {response: returnDataAttr}}\n\t\t} );\n\t} );\n\n})( angular.module( 'mpdDashboard.api.countries', ['ngResource'] ) );\n","/**\n GET /account?min_code=(min_code)&person_id=(person_id)&estimated=(true|false)\n\n Returns mpd data for the selected staff account at the given ministry\n\n Response:\n {\n \tname: \"Babyvic Spomaul\",\n \tperson_id: \"uuid\",\n \tmin_code: \"RUS\",\n \tmpd_analysis: 0.8, // red/yellow/green traffic light, possibly number between 0 and 1?\n \taverage_support:[\n \t\t0.964, // Year\n \t\t0.991, // Quarter\n \t\t1.116 // Month\n \t],\n \tincome: [\n \t\t// ['Income Type', 'Amount'],\n\t\t['Local Income', 6672.95],\n\t\t['Foreign Income', 0.00],\n\t\t['Subsidy', 0.00]\n \t],\n\tbudget_trend: [\n\t\t// [ 'Month', 'Balance', 'Income', 'To Raise', 'Expenses', 'Expense Budget' ]\n\t\t['2015-04', 31866.54, 3076.00, 0.00, 5188.74, 0.00 ],\n\t\t[ ... ],\n\t\t[ ... ],\n\t\t[ ... ]\n\t]\n }\n */\n\n(function ( module ) {\n\t'use strict';\n\tmodule.factory( 'Staff', function ( $log, $resource, Settings ) {\n\t\tvar returnDataAttr = function ( response ) {\n\t\t\treturn response.data.data;\n\t\t};\n\n\t\treturn $resource( Settings.api.mpdDashboard( '/staff/:id' ), {}, {\n\t\t\tget: {method: 'GET', interceptor: {response: returnDataAttr}},\n\t\t\tremove: {method: 'DELETE', interceptor: {response: returnDataAttr}}\n\t\t} );\n\t} );\n\n})( angular.module( 'mpdDashboard.api.staff', ['ngResource'] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.factory( 'User', function ( $log, $resource, Settings ) {\n\t\tvar returnDataAttr = function ( response ) {\n\t\t\treturn response.data.data;\n\t\t};\n\n\t\treturn $resource( Settings.api.mpdDashboard( '/user' ), {}, {\n\t\t\tget: {method: 'GET', interceptor: {response: returnDataAttr}}\n\t\t} );\n\t} );\n\n})( angular.module( 'mpdDashboard.api.user', ['ngResource'] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.filter( 'percent', function ( $window ) {\n\t\treturn function ( input, decimals, suffix ) {\n\t\t\tdecimals = angular.isNumber( decimals ) ? decimals : 2;\n\t\t\tif ( angular.isUndefined( suffix ) ) {\n\t\t\t\tsuffix = '%';\n\t\t\t}\n\t\t\tif ( $window.isNaN( input ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn Math.round( input * Math.pow( 10, decimals + 2 ) ) / Math.pow( 10, decimals ) + (suffix ? suffix : 0)\n\t\t};\n\t} );\n\n})( angular.module( 'mpdDashboard.components.percent', [] ) );\n\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.provider( 'Settings', function () {\n\t\tvar config = {};\n\n\t\tthis.setConfig = function ( c ) {\n\t\t\tconfig = c;\n\t\t};\n\n\t\tthis.isDevelopment = function () {\n\t\t\treturn config.environment === 'development';\n\t\t};\n\n\t\tthis.casAuthApiBaseUrl = function() {\n\t\t\treturn config.api.casAuthApi;\n\t\t};\n\n\t\tthis.ticketUrl = function() {\n\t\t\treturn config.api.refresh;\n\t\t};\n\n\t\tfunction apiUrl( base, path ) {\n\t\t\tif ( typeof path === 'undefined' ) return base;\n\t\t\treturn ( path.indexOf( '/' ) === 0 )\n\t\t\t\t? base + path\n\t\t\t\t: base + '/' + path;\n\t\t}\n\n\t\tthis.$get = function () {\n\t\t\treturn {\n\t\t\t\tapi: {\n\t\t\t\t\tmpdDashboard: function ( path ) {\n\t\t\t\t\t\treturn apiUrl( config.api.mpdDashboard, path );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} );\n\n})( angular.module( 'mpdDashboard.settingsService', [] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tmodule.directive( 'regionClick', function ( $log ) {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tscope:    false,\n\t\t\trequire:  'googleChart',\n\t\t\tlink:     function ( scope, element, attrs, googleChartController ) {\n\t\t\t\tfunction callback( chartWrapper, chart, args ) {\n\t\t\t\t\tcallback.$inject = ['chartWrapper', 'chart', 'args'];\n\t\t\t\t\tvar returnValues = {\n\t\t\t\t\t\tchartWrapper: chartWrapper,\n\t\t\t\t\t\tchart:        chart,\n\t\t\t\t\t\targs:         args,\n\t\t\t\t\t\tregion:       args[0].region\n\t\t\t\t\t};\n\t\t\t\t\tscope.$apply( function () {\n\t\t\t\t\t\tscope.$eval( attrs.regionClick, returnValues );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tgoogleChartController.registerChartListener( 'regionClick', callback, this );\n\t\t\t}\n\t\t};\n\t} );\n\n})( angular.module( 'mpdDashboard.components.googlechart.regionClick', [\n\t'googlechart'\n] ) );\n","(function ( module ) {\n\t'use strict';\n\n\tfunction EstimatedToggleController( $scope, $state, estimated ) {\n\t\tvar self = this;\n\t\tthis.model = estimated;\n\n\t\t$scope.$watch( function ( $scope ) {\n\t\t\treturn self.model.estimated\n\t\t}, function ( newVal, oldVal ) {\n\t\t\t$state.go( $state.current, {estimated: newVal} );\n\t\t} );\n\t}\n\n\tmodule.controller( 'EstimatedToggleController', EstimatedToggleController );\n\n})( angular.module( 'mpdDashboard.states.dashboard' ) );\n","(function () {\n\t'use strict';\n\n\tangular.module( 'mpdDashboard', [\n\t\t// Dependencies\n\t\t'gettext',\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'cas-auth-api',\n\t\t'mpdDashboard.settingsService',\n\n\t\t// States\n\t\t'mpdDashboard.states.dashboard.countries'\n\t] );\n})();\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.config( [\"$stateProvider\", \"$urlRouterProvider\", function ( $stateProvider, $urlRouterProvider ) {\n\t\t$urlRouterProvider.otherwise( '/countries' );\n\n\t\t$stateProvider.state( 'app', {\n\t\t\tabstract:    true,\n\t\t\turl:         '/',\n\t\t\tresolve:     {\n\t\t\t\t'user': [\"$log\", \"$q\", \"$state\", \"User\", function ( $log, $q, $state, User ) {\n\t\t\t\t\treturn User.get().$promise;\n\t\t\t\t}]\n\t\t\t},\n\t\t\ttemplateUrl: 'app/states/app.html'\n\t\t} );\n\t}] );\n\n})( angular\n\t.module( 'mpdDashboard.states.app', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'ui.bootstrap.collapse',\n\t\t'ui.bootstrap.dropdown',\n\n\t\t// APIs\n\t\t'mpdDashboard.api.user',\n\n\t\t// States\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.config( [\"$stateProvider\", function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'dashboard', {\n\t\t\tabstract: true,\n\t\t\tparent:   'app',\n\t\t\turl:      '?estimated',\n\t\t\tresolve:  {\n\t\t\t\t'permissions': [\"$q\", \"$state\", \"user\", function ( $q, $state, user ) {\n\t\t\t\t\tvar deferred     = $q.defer(),\n\t\t\t\t\t\thasCountries = user.attributes.permissions.countries.length !== 0,\n\t\t\t\t\t\thasAccounts  = user.attributes.permissions.accounts.length !== 0;\n\n\t\t\t\t\tif ( hasCountries || hasAccounts ) {\n\t\t\t\t\t\tdeferred.resolve( user.attributes.permissions );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\tdeferred.reject( 'unauthorized' );\n\t\t\t\t\t}\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}],\n\t\t\t\t'estimated':   [\"$stateParams\", function ( $stateParams ) {\n\t\t\t\t\treturn {estimated: $stateParams.estimated === 'false' ? false : true};\n\t\t\t\t}]\n\t\t\t},\n\t\t\tviews:    {\n\t\t\t\t'footer@app':     {\n\t\t\t\t\ttemplate:   '<div ng-if=\"estimated.estimated\" class=\"alert alert-estimated\">*Based on estimated budget(s)</div>',\n\t\t\t\t\tcontroller: [\"$scope\", \"estimated\", function ( $scope, estimated ) {\n\t\t\t\t\t\t$scope.estimated = estimated;\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t\t'navbarForm@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/estimated-toggle.html',\n\t\t\t\t\tcontroller:  'EstimatedToggleController as toggle'\n\t\t\t\t},\n\t\t\t\t'navigation@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/navigation.html',\n\t\t\t\t\tcontroller:  'NavigationController as nav'\n\t\t\t\t}\n\t\t\t},\n\t\t\tparams:   {\n\t\t\t\testimated: {\n\t\t\t\t\tvalue:  'true',\n\t\t\t\t\tsquash: true\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}] );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'ui.bootstrap.buttons',\n\n\t\t// APIs\n\t\t'mpdDashboard.api.user',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.app'\n\t] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.config( [\"$stateProvider\", function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'unauthorized', {\n\t\t\tparent:  'app',\n\t\t\turl:     '',\n\t\t\tresolve: {\n\t\t\t\t'permissions': [\"$q\", \"$state\", \"User\", function ( $q, $state, User ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tUser.get().$promise.then( function ( user ) {\n\t\t\t\t\t\tvar countries = _.sortBy( user.attributes.permissions.countries, 'name' ),\n\t\t\t\t\t\t\taccounts  = _.sortBy( user.attributes.permissions.accounts, 'name' );\n\t\t\t\t\t\tif ( countries.length === 0 && accounts.length === 0 ) {\n\t\t\t\t\t\t\tdeferred.resolve( true );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( countries.length !== 0 ) {\n\t\t\t\t\t\t\tif ( countries.length === 1 ) {\n\t\t\t\t\t\t\t\tvar country = _.first( countries );\n\t\t\t\t\t\t\t\t$state.go( 'country', {id: country.id} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t$state.go( 'countries' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar account = _.first( accounts );\n\t\t\t\t\t\t\t$state.go( 'staffAccount', {id: account.id} );\n\t\t\t\t\t\t}\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tdeferred.resolve( true );\n\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}]\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/unauthorized/unauthorized.html',\n\t\t\t\t\tcontroller:  [\"$scope\", \"permissions\", \"$stateParams\", function ( $scope, permissions, $stateParams ) {\n\t\t\t\t\t\tconsole.log( $stateParams );\n\t\t\t\t\t\t// require permissions so it gets resolved\n\t\t\t\t\t\t$scope.message = angular.isDefined( $stateParams.message ) ? $stateParams.message : undefined;\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tmessage: null\n\t\t\t}\n\t\t} );\n\t}] );\n\n})( angular\n\t.module( 'mpdDashboard.states.unauthorized', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.app',\n\t\t'mpdDashboard.states.dashboard.countries',\n\t\t'mpdDashboard.states.dashboard.staffAccount',\n\t\t'mpdDashboard.states.dashboard.country'\n\t] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.config( [\"$stateProvider\", function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'countries', {\n\t\t\tparent:  'dashboard',\n\t\t\turl:     'countries',\n\t\t\tresolve: {\n\t\t\t\t'hasCountries': [\"$state\", \"permissions\", function ( $state, permissions ) {\n\t\t\t\t\tif ( permissions.countries.length === 0 ) {\n\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t}\n\t\t\t\t\treturn permissions.countries;\n\t\t\t\t}],\n\t\t\t\t'countries':    [\"$log\", \"$q\", \"$state\", \"Countries\", \"estimated\", \"hasCountries\", function ( $log, $q, $state, Countries, estimated, hasCountries ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tCountries\n\t\t\t\t\t\t.query( estimated.estimated ? {estimated: true} : {} )\n\t\t\t\t\t\t.$promise\n\t\t\t\t\t\t.then( function ( countries ) {\n\t\t\t\t\t\t\tdeferred.resolve( countries );\n\t\t\t\t\t\t}, function () {\n\t\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}],\n\t\t\t\t'geodata':      [\"$log\", \"$filter\", \"countries\", function ( $log, $filter, countries ) {\n\t\t\t\t\tvar data       = _.reject( _.pluck( countries, 'attributes' ), function ( obj ) {\n\t\t\t\t\t\t\treturn angular.isUndefined( obj.iso_code ) || _.isNull( obj.iso_code ) || obj.iso_code === '';\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\tiso_codes  = ['Country'].concat( _.pluck( data, 'iso_code' ) ),\n\t\t\t\t\t\tmpd_levels = ['MPD Level'].concat( _.map( _.pluck( data, 'mpd_level' ), function ( num ) {\n\t\t\t\t\t\t\treturn $filter( 'percent' )( num, 2, false );\n\t\t\t\t\t\t} ) );\n\t\t\t\t\treturn _.zip( iso_codes, mpd_levels );\n\t\t\t\t}]\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/countries/countries.html',\n\t\t\t\t\tcontroller:  'CountriesController as countries'\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}] );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard.countries', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'googlechart',\n\t\t'mpdDashboard.components.googlechart.regionClick',\n\t\t'mpdDashboard.components.percent',\n\n\t\t// API\n\t\t'mpdDashboard.api.countries',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.dashboard',\n\t\t'mpdDashboard.states.dashboard.country',\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.config( [\"$stateProvider\", function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'country', {\n\t\t\tparent:  'dashboard',\n\t\t\turl:     'country/{id:int}',\n\t\t\tresolve: {\n\t\t\t\t'hasCountry':       [\"$state\", \"$stateParams\", \"permissions\", function ( $state, $stateParams, permissions ) {\n\t\t\t\t\tvar country = _.findWhere( permissions.countries, {id: $stateParams.id} );\n\t\t\t\t\tif ( angular.isUndefined( country ) ) {\n\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t}\n\t\t\t\t\treturn country;\n\t\t\t\t}],\n\t\t\t\t'country':          [\"$q\", \"$state\", \"$stateParams\", \"Countries\", \"estimated\", \"hasCountry\", function ( $q, $state, $stateParams, Countries, estimated, hasCountry ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tCountries\n\t\t\t\t\t\t.get(\n\t\t\t\t\t\t\testimated.estimated ? {\n\t\t\t\t\t\t\t\tid:        $stateParams.id,\n\t\t\t\t\t\t\t\testimated: true\n\t\t\t\t\t\t\t} : {id: $stateParams.id}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.$promise\n\t\t\t\t\t\t.then( function ( country ) {\n\t\t\t\t\t\t\tdeferred.resolve( country );\n\t\t\t\t\t\t}, function () {\n\t\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}],\n\t\t\t\t'mpdHealthData':    [\"country\", function ( country ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t['Support Level', 'Percentage Raised'],\n\t\t\t\t\t\t['> 100%', country.attributes.mpd_health[0].length],\n\t\t\t\t\t\t['80 - 100%', country.attributes.mpd_health[1].length],\n\t\t\t\t\t\t['50 - 80%', country.attributes.mpd_health[2].length],\n\t\t\t\t\t\t['< 50%', country.attributes.mpd_health[3].length],\n\t\t\t\t\t\t['No Budget', country.attributes.mpd_health[4].length]\n\t\t\t\t\t];\n\t\t\t\t}],\n\t\t\t\t'supportTrendData': [\"$window\", \"$q\", \"googleChartApiPromise\", \"country\", function ( $window, $q, googleChartApiPromise, country ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tgoogleChartApiPromise.then( function () {\n\t\t\t\t\t\tvar average_support = _.map( country.attributes.average_support, function ( data ) {\n\t\t\t\t\t\t\tdata[0] = new Date( data[0] );\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tvar data = $window.google.visualization.arrayToDataTable(\n\t\t\t\t\t\t\t[['Period', 'Average Support Level', 'Staff with more than 90%']].concat( average_support )\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tvar dateFormat = new $window.google.visualization.DateFormat( {\n\t\t\t\t\t\t\tpattern: 'MMM y'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdateFormat.format( data, 0 );\n\n\t\t\t\t\t\tvar percentFormat = new $window.google.visualization.NumberFormat( {\n\t\t\t\t\t\t\tpattern:        '#,###%',\n\t\t\t\t\t\t\tfractionDigits: 2\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tpercentFormat.format( data, 1 );\n\t\t\t\t\t\tpercentFormat.format( data, 2 );\n\n\t\t\t\t\t\tdeferred.resolve( data );\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}]\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app':      {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/country/country.html',\n\t\t\t\t\tcontroller:  'CountryController as country'\n\t\t\t\t},\n\t\t\t\t'title@app': {\n\t\t\t\t\ttemplate:   '<span>{{name}}</span>',\n\t\t\t\t\tcontroller: [\"$scope\", \"country\", function ( $scope, country ) {\n\t\t\t\t\t\t$scope.name = country.attributes.name;\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}] );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard.country', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'googlechart',\n\t\t'mpdDashboard.components.percent',\n\n\t\t// API\n\t\t'mpdDashboard.api.countries',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.dashboard',\n\t\t'mpdDashboard.states.dashboard.staffAccount',\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.config( [\"$stateProvider\", function ( $stateProvider ) {\n\n\t\t$stateProvider.state( 'staffAccount', {\n\t\t\tparent:  'dashboard',\n\t\t\turl:     'staff/{id:int}',\n\t\t\tresolve: {\n\t\t\t\t'account':             [\"$q\", \"$state\", \"$stateParams\", \"Staff\", \"estimated\", \"permissions\", function ( $q, $state, $stateParams, Staff, estimated, permissions ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tStaff\n\t\t\t\t\t\t.get(\n\t\t\t\t\t\t\testimated.estimated ? {\n\t\t\t\t\t\t\t\tid:        $stateParams.id,\n\t\t\t\t\t\t\t\testimated: true\n\t\t\t\t\t\t\t} : {id: $stateParams.id}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.$promise\n\t\t\t\t\t\t.then( function ( account ) {\n\t\t\t\t\t\t\tdeferred.resolve( account );\n\t\t\t\t\t\t}, function () {\n\t\t\t\t\t\t\t$state.go( 'unauthorized' );\n\t\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}],\n\t\t\t\t'budgetTrendData':     [\"$window\", \"$q\", \"googleChartApiPromise\", \"account\", function ( $window, $q, googleChartApiPromise, account ) {\n\t\t\t\t\tvar deferred = $q.defer();\n\t\t\t\t\tgoogleChartApiPromise.then( function () {\n\t\t\t\t\t\tvar budget_trend = _.map( account.attributes.budget_trend, function ( data ) {\n\t\t\t\t\t\t\tdata[0] = new Date( data[0] );\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tvar data = $window.google.visualization.arrayToDataTable(\n\t\t\t\t\t\t\t[['Month', 'Balance', 'Income', 'To Raise', 'Expenses', 'Expense Budget']].concat( budget_trend )\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tvar dateFormat = new $window.google.visualization.DateFormat( {\n\t\t\t\t\t\t\tpattern: 'MMM y'\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdateFormat.format( data, 0 );\n\n\t\t\t\t\t\tdeferred.resolve( data );\n\t\t\t\t\t}, function () {\n\t\t\t\t\t\tdeferred.reject();\n\t\t\t\t\t} );\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}],\n\t\t\t\t'incomeBreakdownData': [\"account\", function ( account ) {\n\t\t\t\t\treturn [['Income Type', 'Amount']].concat( account.attributes.income );\n\t\t\t\t}]\n\t\t\t},\n\t\t\tviews:   {\n\t\t\t\t'@app': {\n\t\t\t\t\ttemplateUrl: 'app/states/dashboard/staff-account/staff-account.html',\n\t\t\t\t\tcontroller:  'StaffAccountController as staffAccountCtrl'\n\t\t\t\t},\n\t\t\t\t'title@app': {\n\t\t\t\t\ttemplate:   '<span>{{name}}</span>',\n\t\t\t\t\tcontroller: [\"$scope\", \"account\", function ( $scope, account ) {\n\t\t\t\t\t\t$scope.name = account.attributes.name;\n\t\t\t\t\t}]\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}] );\n\n})( angular\n\t.module( 'mpdDashboard.states.dashboard.staffAccount', [\n\t\t// Dependencies\n\t\t'ui.router',\n\t\t'angular-growl',\n\t\t'googlechart',\n\t\t'ui.bootstrap.dropdown',\n\t\t'mpdDashboard.components.percent',\n\n\t\t// API\n\t\t'mpdDashboard.api.staff',\n\n\t\t// Dependent States\n\t\t'mpdDashboard.states.dashboard.country',\n\t\t'mpdDashboard.states.unauthorized'\n\t] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\t// Enable html5mode\n\tmodule.config( [\"$locationProvider\", function ( $locationProvider ) {\n\t\t$locationProvider.html5Mode( true );\n\t}] );\n\n\t// Initialize Application Settings\n\tmodule.config( [\"SettingsProvider\", function ( SettingsProvider ) {\n\t\tSettingsProvider.setConfig( window.MPDDashboard.config );\n\t}] );\n\n\t// Configure Debug Logging\n\tmodule.config( [\"$logProvider\", \"SettingsProvider\", function ( $logProvider, SettingsProvider ) {\n\t\t$logProvider.debugEnabled( SettingsProvider.isDevelopment() );\n\t}] );\n\n\t// Configure Cas Authenticated Api\n\tmodule.config( [\"casAuthApiProvider\", \"SettingsProvider\", function ( casAuthApiProvider, SettingsProvider ) {\n\t\tcasAuthApiProvider\n\t\t\t.setRequireAccessToken( true )\n\t\t\t.setCacheAccessToken( true )\n\t\t\t.setAuthenticationApiBaseUrl( SettingsProvider.casAuthApiBaseUrl() )\n\t\t\t.setTicketUrl( SettingsProvider.ticketUrl() );\n\t}] );\n\n\t// Configure Growl\n\tmodule.config( [\"growlProvider\", function ( growlProvider ) {\n\t\tgrowlProvider.globalPosition( 'top-right' );\n\t\tgrowlProvider.globalDisableCountDown( true );\n\t\tgrowlProvider.globalTimeToLive( {success: 10000, error: -1, warning: -1, info: 10000} );\n\t}] );\n\n\t// Register managed API with casAuthApi\n\tmodule.run( [\"casAuthApi\", \"Settings\", function ( casAuthApi, Settings ) {\n\t\tcasAuthApi.addManagedApi( Settings.api.mpdDashboard() );\n\t}] );\n\n\tmodule.run( [\"$log\", \"$rootScope\", function ( $log, $rootScope ) {\n\t\t$rootScope.$on( '$stateChangeStart', function () {\n\t\t\tangular.element( 'div.loading' ).removeClass( 'hide' );\n\t\t} );\n\t\t$rootScope.$on( '$stateChangeSuccess', function () {\n\t\t\tangular.element( 'div.loading' ).addClass( 'hide' );\n\t\t} );\n\t\t$rootScope.$on( '$stateChangeError', function ( event, toState, toParams, fromState, fromParams, error ) {\n\t\t\t$log.error( '$stateChangeError:', toState, toParams, error );\n\t\t} );\n\t}] );\n\n})( angular.module( 'mpdDashboard' ) );\n\n/**\n GET /countries?estimated=(false|true)\n\n Fetch a list of countries (ministries technically) and corresponding mpd status using either actual or estimated budgets.\n If estimated is missing, assume false.\n\n Response:\n [\n {\n\t name: \"Chile\",     // Country Name\n\t min_code: \"CHL\"       // Ministry Code\n\t iso_code: \"CL\",       // ISO 3166 alpha-2\n\t mpd_level: 0.72,        // MPD Level used in geochart\n\t staff_with_budget: 0, // Staff with a budget (%)\n\t staff_raised: [       // % of Staff who have raised\n\t\t 0,    // Less than 50%\n\t\t 0.75, // 50 to 80%\n\t\t 0.25, // 80 to 100%\n\t\t 0     // Greater than 100%\n\t ],\n\t budget_spent: 1,      // % of Expense Budget Spent\n\t raised_locally: 0.7   // Support raised locally (%)\n },\n ...\n ]\n */\n\n(function ( module ) {\n\t'use strict';\n\tmodule.factory( 'Countries', [\"$log\", \"$resource\", \"Settings\", function ( $log, $resource, Settings ) {\n\t\tvar returnDataAttr = function ( response ) {\n\t\t\treturn response.data.data;\n\t\t};\n\n\t\treturn $resource( Settings.api.mpdDashboard( '/countries/:id' ), {}, {\n\t\t\tquery: {method: 'GET', interceptor: {response: returnDataAttr}},\n\t\t\tget:   {method: 'GET', interceptor: {response: returnDataAttr}}\n\t\t} );\n\t}] );\n\n})( angular.module( 'mpdDashboard.api.countries', ['ngResource'] ) );\n\n/**\n GET /account?min_code=(min_code)&person_id=(person_id)&estimated=(true|false)\n\n Returns mpd data for the selected staff account at the given ministry\n\n Response:\n {\n \tname: \"Babyvic Spomaul\",\n \tperson_id: \"uuid\",\n \tmin_code: \"RUS\",\n \tmpd_analysis: 0.8, // red/yellow/green traffic light, possibly number between 0 and 1?\n \taverage_support:[\n \t\t0.964, // Year\n \t\t0.991, // Quarter\n \t\t1.116 // Month\n \t],\n \tincome: [\n \t\t// ['Income Type', 'Amount'],\n\t\t['Local Income', 6672.95],\n\t\t['Foreign Income', 0.00],\n\t\t['Subsidy', 0.00]\n \t],\n\tbudget_trend: [\n\t\t// [ 'Month', 'Balance', 'Income', 'To Raise', 'Expenses', 'Expense Budget' ]\n\t\t['2015-04', 31866.54, 3076.00, 0.00, 5188.74, 0.00 ],\n\t\t[ ... ],\n\t\t[ ... ],\n\t\t[ ... ]\n\t]\n }\n */\n\n(function ( module ) {\n\t'use strict';\n\tmodule.factory( 'Staff', [\"$log\", \"$resource\", \"Settings\", function ( $log, $resource, Settings ) {\n\t\tvar returnDataAttr = function ( response ) {\n\t\t\treturn response.data.data;\n\t\t};\n\n\t\treturn $resource( Settings.api.mpdDashboard( '/staff/:id' ), {}, {\n\t\t\tget: {method: 'GET', interceptor: {response: returnDataAttr}},\n\t\t\tremove: {method: 'DELETE', interceptor: {response: returnDataAttr}}\n\t\t} );\n\t}] );\n\n})( angular.module( 'mpdDashboard.api.staff', ['ngResource'] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.factory( 'User', [\"$log\", \"$resource\", \"Settings\", function ( $log, $resource, Settings ) {\n\t\tvar returnDataAttr = function ( response ) {\n\t\t\treturn response.data.data;\n\t\t};\n\n\t\treturn $resource( Settings.api.mpdDashboard( '/user' ), {}, {\n\t\t\tget: {method: 'GET', interceptor: {response: returnDataAttr}}\n\t\t} );\n\t}] );\n\n})( angular.module( 'mpdDashboard.api.user', ['ngResource'] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.filter( 'percent', [\"$window\", function ( $window ) {\n\t\treturn function ( input, decimals, suffix ) {\n\t\t\tdecimals = angular.isNumber( decimals ) ? decimals : 2;\n\t\t\tif ( angular.isUndefined( suffix ) ) {\n\t\t\t\tsuffix = '%';\n\t\t\t}\n\t\t\tif ( $window.isNaN( input ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn Math.round( input * Math.pow( 10, decimals + 2 ) ) / Math.pow( 10, decimals ) + (suffix ? suffix : 0)\n\t\t};\n\t}] );\n\n})( angular.module( 'mpdDashboard.components.percent', [] ) );\n\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.provider( 'Settings', function () {\n\t\tvar config = {};\n\n\t\tthis.setConfig = function ( c ) {\n\t\t\tconfig = c;\n\t\t};\n\n\t\tthis.isDevelopment = function () {\n\t\t\treturn config.environment === 'development';\n\t\t};\n\n\t\tthis.casAuthApiBaseUrl = function() {\n\t\t\treturn config.api.casAuthApi;\n\t\t};\n\n\t\tthis.ticketUrl = function() {\n\t\t\treturn config.api.refresh;\n\t\t};\n\n\t\tfunction apiUrl( base, path ) {\n\t\t\tif ( typeof path === 'undefined' ) return base;\n\t\t\treturn ( path.indexOf( '/' ) === 0 )\n\t\t\t\t? base + path\n\t\t\t\t: base + '/' + path;\n\t\t}\n\n\t\tthis.$get = function () {\n\t\t\treturn {\n\t\t\t\tapi: {\n\t\t\t\t\tmpdDashboard: function ( path ) {\n\t\t\t\t\t\treturn apiUrl( config.api.mpdDashboard, path );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} );\n\n})( angular.module( 'mpdDashboard.settingsService', [] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tmodule.directive( 'regionClick', [\"$log\", function ( $log ) {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tscope:    false,\n\t\t\trequire:  'googleChart',\n\t\t\tlink:     function ( scope, element, attrs, googleChartController ) {\n\t\t\t\tfunction callback( chartWrapper, chart, args ) {\n\t\t\t\t\tcallback.$inject = ['chartWrapper', 'chart', 'args'];\n\t\t\t\t\tvar returnValues = {\n\t\t\t\t\t\tchartWrapper: chartWrapper,\n\t\t\t\t\t\tchart:        chart,\n\t\t\t\t\t\targs:         args,\n\t\t\t\t\t\tregion:       args[0].region\n\t\t\t\t\t};\n\t\t\t\t\tscope.$apply( function () {\n\t\t\t\t\t\tscope.$eval( attrs.regionClick, returnValues );\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tgoogleChartController.registerChartListener( 'regionClick', callback, this );\n\t\t\t}\n\t\t};\n\t}] );\n\n})( angular.module( 'mpdDashboard.components.googlechart.regionClick', [\n\t'googlechart'\n] ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tfunction EstimatedToggleController( $scope, $state, estimated ) {\n\t\tvar self = this;\n\t\tthis.model = estimated;\n\n\t\t$scope.$watch( function ( $scope ) {\n\t\t\treturn self.model.estimated\n\t\t}, function ( newVal, oldVal ) {\n\t\t\t$state.go( $state.current, {estimated: newVal} );\n\t\t} );\n\t}\n\tEstimatedToggleController.$inject = [\"$scope\", \"$state\", \"estimated\"];\n\n\tmodule.controller( 'EstimatedToggleController', EstimatedToggleController );\n\n})( angular.module( 'mpdDashboard.states.dashboard' ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tfunction NavigationController( $log, $state, permissions ) {\n\t\tthis.$state = $state;\n\t\tthis.countries = permissions.countries;\n\t\tthis.accounts = permissions.accounts;\n\t}\n\tNavigationController.$inject = [\"$log\", \"$state\", \"permissions\"];\n\n\tmodule.controller( 'NavigationController', NavigationController );\n\n})( angular.module( 'mpdDashboard.states.dashboard' ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tfunction CountriesController( $log, $window, $state, countries, geodata ) {\n\t\tthis.$state = $state;\n\t\tthis.countries = countries;\n\t\tthis.geochart = {\n\t\t\ttype:    'GeoChart',\n\t\t\tdata:    geodata,\n\t\t\toptions: {\n\t\t\t\t// Fetch backgroundColor for containing div background\n\t\t\t\tbackgroundColor: $window.jQuery( '.dashboard-well' ).css( 'backgroundColor' ),\n\t\t\t\tcolorAxis:       {\n\t\t\t\t\tminValue: 50,\n\t\t\t\t\tmaxValue: 100,\n\t\t\t\t\tcolors:   [\n\t\t\t\t\t\t$window.jQuery( '.countries-geochart-colors .danger' ).css( 'backgroundColor' ),\n\t\t\t\t\t\t$window.jQuery( '.countries-geochart-colors .warning' ).css( 'backgroundColor' ),\n\t\t\t\t\t\t$window.jQuery( '.countries-geochart-colors .success' ).css( 'backgroundColor' )\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\tCountriesController.$inject = [\"$log\", \"$window\", \"$state\", \"countries\", \"geodata\"];\n\n\tCountriesController.prototype.onReady = function ( chartWrapper ) {\n\t\t// This fixes the issue initially, but any region mouseover /click break it.\n\n\t\t// Fixes issue with gradients and HTML <base> tag\n\t\t// @see https://github.com/google/google-visualization-issues/issues/2000\n\t\tjQuery( chartWrapper.getContainerId() ).find( 'svg' ).each( function () {\n\t\t\tjQuery( this ).find( \"g\" ).each( function () {\n\t\t\t\tif ( jQuery( this ).attr( 'clip-path' ) ) {\n\t\t\t\t\tif ( jQuery( this ).attr( 'clip-path' ).indexOf( 'url(#' ) == -1 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tjQuery( this ).attr( 'clip-path', 'url(' + document.location + jQuery( this ).attr( 'clip-path' ).substring( 4 ) )\n\t\t\t\t}\n\t\t\t} );\n\t\t\tjQuery( this ).find( \"rect\" ).each( function () {\n\t\t\t\tif ( jQuery( this ).attr( 'fill' ) ) {\n\t\t\t\t\tif ( jQuery( this ).attr( 'fill' ).indexOf( 'url(#' ) == -1 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tjQuery( this ).attr( 'fill', 'url(' + document.location + jQuery( this ).attr( 'fill' ).substring( 4 ) )\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n\n\tCountriesController.prototype.onRegionClick = function ( region ) {\n\t\tvar country = _.filter( this.countries, function ( obj ) {\n\t\t\treturn obj.attributes.iso_code === region;\n\t\t} ).pop();\n\t\tif ( angular.isDefined( country ) ) {\n\t\t\tthis.$state.go( 'country', {id: country.id} );\n\t\t}\n\t};\n\n\tmodule.controller( 'CountriesController', CountriesController );\n\n})( angular.module( 'mpdDashboard.states.dashboard.countries' ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tfunction CountryController( $log, $window, $state, mpdHealthData, supportTrendData, country ) {\n\t\tthis.$state = $state;\n\n\t\tthis.mpdHealth = {\n\t\t\ttype:    'PieChart',\n\t\t\tdata:    mpdHealthData,\n\t\t\toptions: {\n\t\t\t\tpieHole:             0.4, reverseCategories: false,\n\t\t\t\tchartArea:           {\n\t\t\t\t\tleft:   60,\n\t\t\t\t\ttop:    20,\n\t\t\t\t\twidth:  \"120%\",\n\t\t\t\t\theight: \"90%\"\n\t\t\t\t},\n\t\t\t\tlegend:              {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor:     $window.jQuery( '.mpd-health' ).css( 'backgroundColor' ),\n\t\t\t\tpieSliceBorderColor: $window.jQuery( '.mpd-health' ).css( 'backgroundColor' ),\n\t\t\t\tslices:              [\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color1' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color2' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color3' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color4' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color5' ).css( 'backgroundColor' )}\n\t\t\t\t]\n\t\t\t}\n\t\t};\n\n\t\tthis.supportTrend = {\n\t\t\ttype:    'LineChart',\n\t\t\tdata:    supportTrendData,\n\t\t\toptions: {\n\t\t\t\tlegend:          {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor: $window.jQuery( '.support-trend' ).css( 'backgroundColor' ),\n\t\t\t\tcolors:          [\n\t\t\t\t\t$window.jQuery( '.support-trend .chart-colors .color1' ).css( 'backgroundColor' ),\n\t\t\t\t\t$window.jQuery( '.support-trend .chart-colors .color2' ).css( 'backgroundColor' )\n\t\t\t\t],\n\t\t\t\tlineWidth:       3,\n\t\t\t\tpointSize:       4,\n\t\t\t\thAxis:           {baselineColor: 'white', format: 'MMM y', textStyle: {color: 'white'}},\n\t\t\t\tvAxis:           {baselineColor: 'white', format: 'percent', textStyle: {color: 'white'}}\n\t\t\t}\n\t\t};\n\n\t\tthis.onMpdHealthSelect = function ( selectedItem ) {\n\t\t\tif ( angular.isUndefined( selectedItem ) ) {\n\t\t\t\tdelete this.staff;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.staffHeading = mpdHealthData[selectedItem.row + 1][0];\n\t\t\t\tthis.staff = country.attributes.mpd_health[selectedItem.row];\n\t\t\t}\n\t\t}\n\t}\n\tCountryController.$inject = [\"$log\", \"$window\", \"$state\", \"mpdHealthData\", \"supportTrendData\", \"country\"];\n\n\tmodule.controller( 'CountryController', CountryController );\n\n})( angular.module( 'mpdDashboard.states.dashboard.country' ) );\n\n(function ( module ) {\n\t'use strict';\n\n\tfunction StaffAccountController( $log, $window, $state, account, budgetTrendData, incomeBreakdownData, Staff ) {\n\t\tvar budgetTrendDiv        = $window.jQuery( '.budget-trend' ),\n\t\t\tincomeBreakdownDiv    = $window.jQuery( '.income-breakdown' ),\n\t\t\tbackgroundColor       = budgetTrendDiv.css( 'backgroundColor' ),\n\t\t\ttextColor             = budgetTrendDiv.css( 'color' ),\n\t\t\ttrendColors           = [\n\t\t\t\tbudgetTrendDiv.find( '.color1' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color2' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color3' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color4' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color5' ).css( 'backgroundColor' )\n\t\t\t],\n\t\t\tincomeBreakdownColors = [\n\t\t\t\tincomeBreakdownDiv.find( '.color1' ).css( 'backgroundColor' ),\n\t\t\t\tincomeBreakdownDiv.find( '.color2' ).css( 'backgroundColor' ),\n\t\t\t\tincomeBreakdownDiv.find( '.color3' ).css( 'backgroundColor' )\n\t\t\t];\n\n\t\tthis.$state = $state;\n\t\tthis.mpdAnalysis = account.attributes.mpd_analysis;\n\t\tthis.averageSupport = account.attributes.average_support;\n\t\tthis.incorrect_association = account.attributes.incorrect_association;\n\n\t\tthis.budgetTrend = {\n\t\t\ttype:    'LineChart',\n\t\t\tdata:    budgetTrendData,\n\t\t\tview:    {\n\t\t\t\tcolumns: [0, 1, 2, 3, 4, 5]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tlegend:          {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor: backgroundColor,\n\t\t\t\tcolors:          angular.copy( trendColors ),\n\t\t\t\tlineWidth:       3,\n\t\t\t\tseries:          {\n\t\t\t\t\t2: {\n\t\t\t\t\t\tlineDashStyle: [10, 6]\n\t\t\t\t\t},\n\t\t\t\t\t4: {\n\t\t\t\t\t\tlineDashStyle: [10, 6]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\thAxis:           {baselineColor: textColor, textStyle: {color: textColor}},\n\t\t\t\tvAxis:           {baselineColor: textColor, textStyle: {color: textColor}}\n\t\t\t}\n\t\t};\n\n\t\tthis.hideTrendSeries = function ( selectedItem ) {\n\t\t\tif ( angular.isUndefined( selectedItem ) ) return;\n\t\t\tvar col = selectedItem.column;\n\t\t\tif ( selectedItem.row === null ) {\n\n\t\t\t\t// If series is enabled, disable it\n\t\t\t\tif ( this.budgetTrend.view.columns[col] == col ) {\n\t\t\t\t\tthis.budgetTrend.view.columns[col] = {\n\t\t\t\t\t\tlabel: budgetTrendData.getColumnLabel( col ),\n\t\t\t\t\t\ttype:  budgetTrendData.getColumnType( col ),\n\t\t\t\t\t\tcalc:  function () {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tthis.budgetTrend.options.colors[col - 1] = '#CCCCCC';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.budgetTrend.view.columns[col] = col;\n\t\t\t\t\tthis.budgetTrend.options.colors[col - 1] = trendColors[col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.incomeBreakdown = {\n\t\t\ttype:    'PieChart',\n\t\t\tdata:    incomeBreakdownData,\n\t\t\toptions: {\n\t\t\t\tpieHole:             0.4,\n\t\t\t\treverseCategories:   false,\n\t\t\t\tchartArea:           {\n\t\t\t\t\tleft:   60,\n\t\t\t\t\ttop:    20,\n\t\t\t\t\twidth:  \"120%\",\n\t\t\t\t\theight: \"90%\"\n\t\t\t\t},\n\t\t\t\tlegend:              {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: textColor\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor:     backgroundColor,\n\t\t\t\tpieSliceBorderColor: backgroundColor,\n\t\t\t\tslices:              [\n\t\t\t\t\t{color: incomeBreakdownColors[0]},\n\t\t\t\t\t{color: incomeBreakdownColors[1]},\n\t\t\t\t\t{color: incomeBreakdownColors[2]}\n\t\t\t\t]\n\t\t\t}\n\t\t};\n\n\t\tthis.reportIncorrectAssociation = function () {\n\t\t\tvar self = this;\n\t\t\tStaff\n\t\t\t\t.remove( {id: account.id} )\n\t\t\t\t.$promise\n\t\t\t\t.then( function ( acct ) {\n\t\t\t\t\tself.incorrect_association = true;\n\t\t\t\t}, function () {\n\t\t\t\t} );\n\t\t}\n\t}\n\tStaffAccountController.$inject = [\"$log\", \"$window\", \"$state\", \"account\", \"budgetTrendData\", \"incomeBreakdownData\", \"Staff\"];\n\n\tmodule.controller( 'StaffAccountController', StaffAccountController );\n\n})( angular.module( 'mpdDashboard.states.dashboard.staffAccount' ) );\n","(function ( module ) {\n\t'use strict';\n\n\tfunction NavigationController( $log, $state, permissions ) {\n\t\tthis.$state = $state;\n\t\tthis.countries = permissions.countries;\n\t\tthis.accounts = permissions.accounts;\n\t}\n\n\tmodule.controller( 'NavigationController', NavigationController );\n\n})( angular.module( 'mpdDashboard.states.dashboard' ) );\n","(function ( module ) {\n\t'use strict';\n\n\tfunction CountriesController( $log, $window, $state, countries, geodata ) {\n\t\tthis.$state = $state;\n\t\tthis.countries = countries;\n\t\tthis.geochart = {\n\t\t\ttype:    'GeoChart',\n\t\t\tdata:    geodata,\n\t\t\toptions: {\n\t\t\t\t// Fetch backgroundColor for containing div background\n\t\t\t\tbackgroundColor: $window.jQuery( '.dashboard-well' ).css( 'backgroundColor' ),\n\t\t\t\tcolorAxis:       {\n\t\t\t\t\tminValue: 50,\n\t\t\t\t\tmaxValue: 100,\n\t\t\t\t\tcolors:   [\n\t\t\t\t\t\t$window.jQuery( '.countries-geochart-colors .danger' ).css( 'backgroundColor' ),\n\t\t\t\t\t\t$window.jQuery( '.countries-geochart-colors .warning' ).css( 'backgroundColor' ),\n\t\t\t\t\t\t$window.jQuery( '.countries-geochart-colors .success' ).css( 'backgroundColor' )\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tCountriesController.prototype.onReady = function ( chartWrapper ) {\n\t\t// This fixes the issue initially, but any region mouseover /click break it.\n\n\t\t// Fixes issue with gradients and HTML <base> tag\n\t\t// @see https://github.com/google/google-visualization-issues/issues/2000\n\t\tjQuery( chartWrapper.getContainerId() ).find( 'svg' ).each( function () {\n\t\t\tjQuery( this ).find( \"g\" ).each( function () {\n\t\t\t\tif ( jQuery( this ).attr( 'clip-path' ) ) {\n\t\t\t\t\tif ( jQuery( this ).attr( 'clip-path' ).indexOf( 'url(#' ) == -1 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tjQuery( this ).attr( 'clip-path', 'url(' + document.location + jQuery( this ).attr( 'clip-path' ).substring( 4 ) )\n\t\t\t\t}\n\t\t\t} );\n\t\t\tjQuery( this ).find( \"rect\" ).each( function () {\n\t\t\t\tif ( jQuery( this ).attr( 'fill' ) ) {\n\t\t\t\t\tif ( jQuery( this ).attr( 'fill' ).indexOf( 'url(#' ) == -1 ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tjQuery( this ).attr( 'fill', 'url(' + document.location + jQuery( this ).attr( 'fill' ).substring( 4 ) )\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t};\n\n\tCountriesController.prototype.onRegionClick = function ( region ) {\n\t\tvar country = _.filter( this.countries, function ( obj ) {\n\t\t\treturn obj.attributes.iso_code === region;\n\t\t} ).pop();\n\t\tif ( angular.isDefined( country ) ) {\n\t\t\tthis.$state.go( 'country', {id: country.id} );\n\t\t}\n\t};\n\n\tmodule.controller( 'CountriesController', CountriesController );\n\n})( angular.module( 'mpdDashboard.states.dashboard.countries' ) );\n","(function ( module ) {\n\t'use strict';\n\n\tfunction CountryController( $log, $window, $state, mpdHealthData, supportTrendData, country ) {\n\t\tthis.$state = $state;\n\n\t\tthis.mpdHealth = {\n\t\t\ttype:    'PieChart',\n\t\t\tdata:    mpdHealthData,\n\t\t\toptions: {\n\t\t\t\tpieHole:             0.4, reverseCategories: false,\n\t\t\t\tchartArea:           {\n\t\t\t\t\tleft:   60,\n\t\t\t\t\ttop:    20,\n\t\t\t\t\twidth:  \"120%\",\n\t\t\t\t\theight: \"90%\"\n\t\t\t\t},\n\t\t\t\tlegend:              {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor:     $window.jQuery( '.mpd-health' ).css( 'backgroundColor' ),\n\t\t\t\tpieSliceBorderColor: $window.jQuery( '.mpd-health' ).css( 'backgroundColor' ),\n\t\t\t\tslices:              [\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color1' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color2' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color3' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color4' ).css( 'backgroundColor' )},\n\t\t\t\t\t{color: $window.jQuery( '.mpd-health .chart-colors .color5' ).css( 'backgroundColor' )}\n\t\t\t\t]\n\t\t\t}\n\t\t};\n\n\t\tthis.supportTrend = {\n\t\t\ttype:    'LineChart',\n\t\t\tdata:    supportTrendData,\n\t\t\toptions: {\n\t\t\t\tlegend:          {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor: $window.jQuery( '.support-trend' ).css( 'backgroundColor' ),\n\t\t\t\tcolors:          [\n\t\t\t\t\t$window.jQuery( '.support-trend .chart-colors .color1' ).css( 'backgroundColor' ),\n\t\t\t\t\t$window.jQuery( '.support-trend .chart-colors .color2' ).css( 'backgroundColor' )\n\t\t\t\t],\n\t\t\t\tlineWidth:       3,\n\t\t\t\tpointSize:       4,\n\t\t\t\thAxis:           {baselineColor: 'white', format: 'MMM y', textStyle: {color: 'white'}},\n\t\t\t\tvAxis:           {baselineColor: 'white', format: 'percent', textStyle: {color: 'white'}}\n\t\t\t}\n\t\t};\n\n\t\tthis.onMpdHealthSelect = function ( selectedItem ) {\n\t\t\tif ( angular.isUndefined( selectedItem ) ) {\n\t\t\t\tdelete this.staff;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.staffHeading = mpdHealthData[selectedItem.row + 1][0];\n\t\t\t\tthis.staff = country.attributes.mpd_health[selectedItem.row];\n\t\t\t}\n\t\t}\n\t}\n\n\tmodule.controller( 'CountryController', CountryController );\n\n})( angular.module( 'mpdDashboard.states.dashboard.country' ) );\n","(function ( module ) {\n\t'use strict';\n\n\tfunction StaffAccountController( $log, $window, $state, account, budgetTrendData, incomeBreakdownData, Staff ) {\n\t\tvar budgetTrendDiv        = $window.jQuery( '.budget-trend' ),\n\t\t\tincomeBreakdownDiv    = $window.jQuery( '.income-breakdown' ),\n\t\t\tbackgroundColor       = budgetTrendDiv.css( 'backgroundColor' ),\n\t\t\ttextColor             = budgetTrendDiv.css( 'color' ),\n\t\t\ttrendColors           = [\n\t\t\t\tbudgetTrendDiv.find( '.color1' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color2' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color3' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color4' ).css( 'backgroundColor' ),\n\t\t\t\tbudgetTrendDiv.find( '.color5' ).css( 'backgroundColor' )\n\t\t\t],\n\t\t\tincomeBreakdownColors = [\n\t\t\t\tincomeBreakdownDiv.find( '.color1' ).css( 'backgroundColor' ),\n\t\t\t\tincomeBreakdownDiv.find( '.color2' ).css( 'backgroundColor' ),\n\t\t\t\tincomeBreakdownDiv.find( '.color3' ).css( 'backgroundColor' )\n\t\t\t];\n\n\t\tthis.$state = $state;\n\t\tthis.mpdAnalysis = account.attributes.mpd_analysis;\n\t\tthis.averageSupport = account.attributes.average_support;\n\t\tthis.incorrect_association = account.attributes.incorrect_association;\n\n\t\tthis.budgetTrend = {\n\t\t\ttype:    'LineChart',\n\t\t\tdata:    budgetTrendData,\n\t\t\tview:    {\n\t\t\t\tcolumns: [0, 1, 2, 3, 4, 5]\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tlegend:          {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: 'white'\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor: backgroundColor,\n\t\t\t\tcolors:          angular.copy( trendColors ),\n\t\t\t\tlineWidth:       3,\n\t\t\t\tseries:          {\n\t\t\t\t\t2: {\n\t\t\t\t\t\tlineDashStyle: [10, 6]\n\t\t\t\t\t},\n\t\t\t\t\t4: {\n\t\t\t\t\t\tlineDashStyle: [10, 6]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\thAxis:           {baselineColor: textColor, textStyle: {color: textColor}},\n\t\t\t\tvAxis:           {baselineColor: textColor, textStyle: {color: textColor}}\n\t\t\t}\n\t\t};\n\n\t\tthis.hideTrendSeries = function ( selectedItem ) {\n\t\t\tif ( angular.isUndefined( selectedItem ) ) return;\n\t\t\tvar col = selectedItem.column;\n\t\t\tif ( selectedItem.row === null ) {\n\n\t\t\t\t// If series is enabled, disable it\n\t\t\t\tif ( this.budgetTrend.view.columns[col] == col ) {\n\t\t\t\t\tthis.budgetTrend.view.columns[col] = {\n\t\t\t\t\t\tlabel: budgetTrendData.getColumnLabel( col ),\n\t\t\t\t\t\ttype:  budgetTrendData.getColumnType( col ),\n\t\t\t\t\t\tcalc:  function () {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tthis.budgetTrend.options.colors[col - 1] = '#CCCCCC';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.budgetTrend.view.columns[col] = col;\n\t\t\t\t\tthis.budgetTrend.options.colors[col - 1] = trendColors[col - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.incomeBreakdown = {\n\t\t\ttype:    'PieChart',\n\t\t\tdata:    incomeBreakdownData,\n\t\t\toptions: {\n\t\t\t\tpieHole:             0.4,\n\t\t\t\treverseCategories:   false,\n\t\t\t\tchartArea:           {\n\t\t\t\t\tleft:   60,\n\t\t\t\t\ttop:    20,\n\t\t\t\t\twidth:  \"120%\",\n\t\t\t\t\theight: \"90%\"\n\t\t\t\t},\n\t\t\t\tlegend:              {\n\t\t\t\t\ttextStyle: {\n\t\t\t\t\t\tcolor: textColor\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tbackgroundColor:     backgroundColor,\n\t\t\t\tpieSliceBorderColor: backgroundColor,\n\t\t\t\tslices:              [\n\t\t\t\t\t{color: incomeBreakdownColors[0]},\n\t\t\t\t\t{color: incomeBreakdownColors[1]},\n\t\t\t\t\t{color: incomeBreakdownColors[2]}\n\t\t\t\t]\n\t\t\t}\n\t\t};\n\n\t\tthis.reportIncorrectAssociation = function () {\n\t\t\tvar self = this;\n\t\t\tStaff\n\t\t\t\t.remove( {id: account.id} )\n\t\t\t\t.$promise\n\t\t\t\t.then( function ( acct ) {\n\t\t\t\t\tself.incorrect_association = true;\n\t\t\t\t}, function () {\n\t\t\t\t} );\n\t\t}\n\t}\n\n\tmodule.controller( 'StaffAccountController', StaffAccountController );\n\n})( angular.module( 'mpdDashboard.states.dashboard.staffAccount' ) );\n"],"sourceRoot":"/source/"}